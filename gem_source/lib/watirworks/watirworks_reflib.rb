#=============================================================================#
# File: watirworks_reflib.rb
#
#  Copyright (c) 2008-2016, Joe DiMauro
#  All rights reserved.
#
# Description: Reference data that is platform and application independent.
#
#--
# Modules: Reference - Application independent values including arrays, hashes,
#                      constants, and global variables.
#
#++
#=============================================================================#

#=============================================================================#
# Require and Include section
# Entries for additional files or methods needed by these methods
#=============================================================================#
require 'rubygems'

#=============================================================================#
# Module: WatirWorks_RefLib
#=============================================================================#
#
# Description:  Reference data that is platform and application independent.
#
#               For example, use the hash table USPS_STATES to lookup
#               the full name of a state from its abbreviation.
#
# Instructions: To use the reference data in your scripts add these commands:
#                  require 'watirworks'
#                  include WatirWorks_RefLib
#
#--
# Roadmap: Perhaps add other Geo-specific Data like: Continents, Capitals, Cities, Counties, Planets?
#          Weights & Measures conversion chart? (MileToFeet = 5280)
#          Astrological Signs?, who knows, so long as its useful.
#          For example: Geo-political data is available at:
#              https://www.cia.gov/library/publications/the-world-factbook/
#++
#=============================================================================#

module WatirWorks_RefLib

  # Version of this module
  WW_REFLIB_VERSION = "1.3"

  # Format to use when appending a timestamp to file names
  DATETIME_FILEFORMAT="%Y_%m_%d_%H%M%S"

  # Common time constants for year, month, and day
  # Year strings (yyyy)
  THIS_YEAR=Time.new.year.to_s
  NEXT_YEAR=(Time.new.year + 1).to_s
  LAST_YEAR=(Time.new.year - 1).to_s

  # Define strings with only the last 2-digits of the year (e.g. 08 for 2008)
  # Remember for strings index 0 is the 1st character
  THIS_YR = THIS_YEAR[2,3]
  NEXT_YR = NEXT_YEAR[2,3]
  LAST_YR = LAST_YEAR[2,3]

  # This month string (01-12)
  THIS_MONTH=Time.new.month.to_s

  # This Day string (01-31)
  THIS_DAY=Time.new.day.to_s

  #   Define the format for date strings
  #
  # Formatting parameters for methods:
  #            time.strptime(string[, format])
  #            time.strftime([format,] time)
  #
  #     %a - The abbreviated weekday name (``Sun'')
  # %A - The  full  weekday  name (``Sunday'')
  # %b - The abbreviated month name (``Jan'')
  # %B - The  full  month  name (``January'')
  # %c - The preferred local date and time representation
  # %C - Century (20 in 2009)
  # %d - Day of the month (01..31)
  # %D - Date (%m/%d/%y)
  # %e - Day of the month, blank-padded ( 1..31)
  # %F - Equivalent to %Y-%m-%d (the ISO 8601 date format)
  # %h - Equivalent to %b
  # %H - Hour of the day, 24-hour clock (00..23)
  # %I - Hour of the day, 12-hour clock (01..12)
  # %j - Day of the year (001..366)
  # %k - hour, 24-hour clock, blank-padded ( 0..23)
  # %l - hour, 12-hour clock, blank-padded ( 0..12)
  # %L - Millisecond of the second (000..999)
  # %m - Month of the year (01..12)
  # %M - Minute of the hour (00..59)
  # %n - Newline (\n)
  # %N - Fractional seconds digits, default is 9 digits (nanosecond)
  #         %3N  millisecond (3 digits)
  #         %6N  microsecond (6 digits)
  #         %9N  nanosecond (9 digits)
  # %p - Meridian indicator (``AM''  or  ``PM'')
  # %P - Meridian indicator (``am''  or  ``pm'')
  # %r - time, 12-hour (same as %I:%M:%S %p)
  # %R - time, 24-hour (%H:%M)
  # %s - Number of seconds since 1970-01-01 00:00:00 UTC.
  # %S - Second of the minute (00..60)
  # %t - Tab character (\t)
  # %T - time, 24-hour (%H:%M:%S)
  # %u - Day of the week as a decimal, Monday being 1. (1..7)
  # %U - Week  number  of the current year,
  #         starting with the first Sunday as the first
  #         day of the first week (00..53)
  # %v - VMS date (%e-%b-%Y)
  # %V - Week number of year according to ISO 8601 (01..53)
  # %W - Week  number  of the current year,
  #         starting with the first Monday as the first
  #         day of the first week (00..53)
  # %w - Day of the week (Sunday is 0, 0..6)
  # %x - Preferred representation for the date alone, no time
  # %X - Preferred representation for the time alone, no date
  # %y - Year without a century (00..99)
  # %Y - Year with century
  # %z - Time zone as  hour offset from UTC (e.g. +0900)
  # %Z - Time zone name
  # %% - Literal ``%'' character

  # Global flag to indicate if test runs on local system or remote system
  $bRunLocal = true

  sDateformat = "%m/%d/%Y"  # e.g. 12/31/2011
  #sDateformat = "%Y-%m-%d" # e.g. 2011-12-31

  # Set the current date
  dToday = Time.now

  # Calculate various strings representations of dates (both future and past) based on the current date
  TODAY = dToday.strftime(sDateformat)
  TOMORROW = (dToday + (60 * 60 * 24 * 1)).strftime(sDateformat)
  YESTERDAY = (dToday - (60 * 60 * 24 * 1)).strftime(sDateformat)

  DAYS_FUTURE_1 = (dToday + (60 * 60 * 24 * 1 * 1)).strftime(sDateformat)
  DAYS_FUTURE_2 = (dToday + (60 * 60 * 24 * 1 * 2)).strftime(sDateformat)
  DAYS_FUTURE_3 = (dToday + (60 * 60 * 24 * 1 * 3)).strftime(sDateformat)
  DAYS_FUTURE_4 = (dToday + (60 * 60 * 24 * 1 * 4)).strftime(sDateformat)
  DAYS_FUTURE_5 = (dToday + (60 * 60 * 24 * 1 * 5)).strftime(sDateformat)
  DAYS_FUTURE_6 = (dToday + (60 * 60 * 24 * 1 * 6)).strftime(sDateformat)
  DAYS_FUTURE_7 = (dToday + (60 * 60 * 24 * 1 * 7)).strftime(sDateformat)
  DAYS_FUTURE_8 = (dToday + (60 * 60 * 24 * 1 * 8)).strftime(sDateformat)
  DAYS_FUTURE_9 = (dToday + (60 * 60 * 24 * 1 * 9)).strftime(sDateformat)
  DAYS_FUTURE_10 = (dToday + (60 * 60 * 24 * 1 * 10)).strftime(sDateformat)
  DAYS_FUTURE_30 = (dToday + (60 * 60 * 24 * 1 * 30)).strftime(sDateformat)
  DAYS_FUTURE_60 = (dToday + (60 * 60 * 24 * 1 * 60)).strftime(sDateformat)
  DAYS_FUTURE_90 = (dToday + (60 * 60 * 24 * 1 * 90)).strftime(sDateformat)
  DAYS_FUTURE_365 = (dToday + (60 * 60 * 24 * 1 * 365)).strftime(sDateformat)

  DAYS_PAST_1 = (dToday - (60 * 60 * 24 * 1 * 1)).strftime(sDateformat)
  DAYS_PAST_2 = (dToday - (60 * 60 * 24 * 1 * 2)).strftime(sDateformat)
  DAYS_PAST_3 = (dToday - (60 * 60 * 24 * 1 * 3)).strftime(sDateformat)
  DAYS_PAST_4 = (dToday - (60 * 60 * 24 * 1 * 4)).strftime(sDateformat)
  DAYS_PAST_5 = (dToday - (60 * 60 * 24 * 1 * 5)).strftime(sDateformat)
  DAYS_PAST_6 = (dToday - (60 * 60 * 24 * 1 * 6)).strftime(sDateformat)
  DAYS_PAST_7 = (dToday - (60 * 60 * 24 * 1 * 7)).strftime(sDateformat)
  DAYS_PAST_8 = (dToday - (60 * 60 * 24 * 1 * 8)).strftime(sDateformat)
  DAYS_PAST_9 = (dToday - (60 * 60 * 24 * 1 * 9)).strftime(sDateformat)
  DAYS_PAST_10 = (dToday - (60 * 60 * 24 * 1 * 10)).strftime(sDateformat)
  DAYS_PAST_30 = (dToday - (60 * 60 * 24 * 1 * 30)).strftime(sDateformat)
  DAYS_PAST_60 = (dToday - (60 * 60 * 24 * 1 * 60)).strftime(sDateformat)
  DAYS_PAST_90 = (dToday - (60 * 60 * 24 * 1 * 90)).strftime(sDateformat)
  DAYS_PAST_365 = (dToday - (60 * 60 * 24 * 1 * 365)).strftime(sDateformat)

  WEEKS_FUTURE_1 = (dToday + (60 * 60 * 24 * 1 * 7 * 1)).strftime(sDateformat)
  WEEKS_FUTURE_2 = (dToday + (60 * 60 * 24 * 1 * 7 * 2)).strftime(sDateformat)
  WEEKS_FUTURE_4 = (dToday + (60 * 60 * 24 * 1 * 7 * 4)).strftime(sDateformat)
  WEEKS_FUTURE_8 = (dToday + (60 * 60 * 24 * 1 * 7 * 8)).strftime(sDateformat)
  WEEKS_FUTURE_12 = (dToday + (60 * 60 * 24 * 1 * 7 * 12)).strftime(sDateformat)
  WEEKS_FUTURE_52 = (dToday + (60 * 60 * 24 * 1 * 7 * 52)).strftime(sDateformat)

  WEEKS_PAST_1 = (dToday - (60 * 60 * 24 * 1 * 7 * 1)).strftime(sDateformat)
  WEEKS_PAST_2 = (dToday - (60 * 60 * 24 * 1 * 7 * 2)).strftime(sDateformat)
  WEEKS_PAST_4 = (dToday - (60 * 60 * 24 * 1 * 7 * 4)).strftime(sDateformat)
  WEEKS_PAST_8 = (dToday - (60 * 60 * 24 * 1 * 7 * 8)).strftime(sDateformat)
  WEEKS_PAST_12 = (dToday - (60 * 60 * 24 * 1 * 7 * 12)).strftime(sDateformat)
  WEEKS_PAST_52 = (dToday - (60 * 60 * 24 * 1 * 7 * 52)).strftime(sDateformat)

  # Save the current time to be used Globally for all test in a suite.
  #
  # This will ensure that the same time can be used throughout all the tests, and ensures
  # that if a STRING is created at one point in the test with a timestamp appended to it,
  # that the same timestamp can be re-used at subsequent points in all tests within a testsuite.
  TESTSUITE_START_TIME = Time.now

  # Define timestamp format for use with file names
  # The timestamp of 14 characters can be appended to a file name (e.g. mylogfile_2007_Dec_30_235959.log)
  # Example: sMyPrefix = "mylogfile"
  #          sMyExtension = ".log"
  #          sMyFilename = sMyPrefix + TIMESTAMP_STRING + sMyExtension
  TIMESTAMP_STRING = TESTSUITE_START_TIME.strftime("%Y_%m_%d_%H%M%S")

  #=============================================================================#
  # ObjectName: CANADIAN_PROVINCES
  # Returns: HASH
  #
  # Description: Contains a list of Canadian  Province/Territory abbreviations
  #              and their full names, from the web site:
  #                 http://canadaonline.about.com/library/bl/blpabb.htm
  #
  # Usage examples: CANADIAN_PROVINCES["MB"]  #=>  "Manitoba"
  #                 CANADIAN_PROVINCES.index "Manitoba"  #=>  "MB"
  #=============================================================================#
  CANADIAN_PROVINCES = {
    "AB" => "Alberta",
    "BC" => "British Columbia",
    "MB" => "Manitoba",
    "NB" => "New Brunswick",
    "NL" => "Newfoundland and Labrador",
    "NT" => "Northwest Territories",
    "NS" => "Nova Scotia",
    "NU" => "Nunavut",
    "ON" => "Ontario",
    "PE" => "Prince Edward Island",
    "QC" => "Quebec",
    "SK" => "Saskatchewan",
    "YT" => "Yukon"
  }

  # Hash with the keys and values flipped
  CANADIAN_PROVINCE_ABBREVIATION = CANADIAN_PROVINCES.invert

  #=============================================================================#
  # ObjectName: MEXICAN_STATES
  # Returns: HASH
  #
  # Description: Contains a list of Mexico's State abbreviations
  #              and their full names, from the web site:
  #                 http://www.iowa.gov/tax/forms/84055.pdf
  #
  # Usage examples: MEXICAN_STATES["BS"]  #=>  "Baja California Sur"
  #                 MEXICAN_STATES.index "Baja California Sur"  #=>  "BS"
  #=============================================================================#
  MEXICAN_STATES = {
    "AG" => "Aguascalientes",
    "BJ" => "Baja California",
    "BS" => "Baja California Sur",
    "CP" => "Campeche",
    "CH" => "Chiapas",
    "CI" => "Chihuahua",
    "CU" => "Coahuila",
    "CL" => "Colima",
    "DF" => "Distrito Federal",
    "DG" => "Durango",
    "GJ" => "Guanajuato",
    "GR" => "Guerrero",
    "HG" => "Hidalgo",
    "JA" => "Jalisco",
    "EM" => "Mexico",
    "MH" => "Michoacan",
    "MR" => "Morelos",
    "NA" => "Nayarit",
    "NL" => "Nuevo Leon",
    "OA" => "Oaxaca",
    "PU" => "Puebla",
    "QA" => "Queretaro",
    "QR" => "Quintana Roo",
    "SL" => "San Luis Potosi",
    "SI" => "Sinaloa",
    "SO" => "Sonora",
    "TA" => "Tabasco",
    "TM" => "Tamaulipas",
    "TL" => "Tlaxcala",
    "VZ" => "Veracruz",
    "YC" => "Yucatan",
    "ZT" => "Zacatecas"
  }

  # Hash with the keys and values flipped
  MEXICAN_STATE_ABBREVIATION = MEXICAN_STATES.invert

  #=============================================================================#
  # ObjectName: USPS_STATES
  # Returns: HASH
  #
  # Description: Contains a list of State abbreviations and their full names
  #              from the  United States Postal Service web site:
  #                 http:www.usps.com/ncsc/lookups/usps_abbreviations.html
  #
  # Usage examples: USPS_STATES["CO"]  #=>  "Colorado"
  #                 USPS_STATES.index "Colorado"  #=>  "CO"
  #=============================================================================#
  USPS_STATES = {
    "AL" => "Alabama",
    "AK" => "Alaska",
    "AS" => "American Samoa",
    "AZ" => "Arizona",
    "AR" => "Arkansas",
    "CA" => "California",
    "CO" => "Colorado",
    "CT" => "Connecticut",
    "DE" => "Delaware",
    "DC" => "District of Columbia",
    "FM" => "Federated States of Micronesia",
    "FL" => "Florida",
    "GA" => "Georgia",
    "GU" => "Guam",
    "HI" => "Hawaii",
    "ID" => "Idaho",
    "IL" => "Illinois",
    "IN" => "Indiana",
    "IA" => "Iowa",
    "KS" => "Kansas",
    "KY" => "Kentucky",
    "LA" => "Louisiana",
    "ME" => "Maine",
    "MH" => "Marshall Islands",
    "MD" => "Maryland",
    "MA" => "Massachusetts",
    "MI" => "Michigan",
    "MN" => "Minnesota",
    "MS" => "Mississippi",
    "MO" => "Missouri",
    "MT" => "Montana",
    "NE" => "Nebraska",
    "NH" => "New Hampshire",
    "NJ" => "New Jersey",
    "NM" => "New Mexico",
    "NY" => "New York",
    "NC" => "North Carolina",
    "ND" => "North Dakota",
    "NV" => "Nevada",
    "MP" => "Northern Mariana Islands",
    "OH" => "Ohio",
    "OK" => "Oklahoma",
    "OR" => "Oregon",
    "PW" => "Palau",
    "PA" => "Pennsylvania",
    "PR" => "Puerto Rico",
    "RI" => "Rhode Island",
    "SC" => "South Carolina",
    "SD" => "South Dakota",
    "TN" => "Tennessee",
    "TX" => "Texas",
    "UT" => "Utah",
    "VI" => "Virgin Islands",
    "VA" => "Virginia",
    "WA" => "Washington",
    "WV" => "West Virginia",
    "WI" => "Wisconsin",
    "WY" => "Wyoming"
  }

  # Hash with the keys and values flipped
  USPS_STATE_ABBREVIATION = USPS_STATES.invert

  #=============================================================================#
  # ObjectName: USPS_SECONDARY_UNIT_DESIGNATOR
  # Returns: HASH
  #
  # Description: Contains a list of Secondary Unit Designators and their abbreviations
  #              from the United States Postal Service web site:
  #                 http:www.usps.com/ncsc/lookups/usps_abbreviations.html
  #
  # Usage examples: USPS_SECONDARY_UNIT_DESIGNATOR["PENTHOUSE"] # => "PH"
  #                 USPS_SECONDARY_UNIT_DESIGNATOR.index "PH" #=> "PENTHOUSE"
  #=============================================================================#
  USPS_SECONDARY_UNIT_DESIGNATOR = {
    "APARTMENT" => "APT",
    "BASEMENT" => "BSMT",
    "BUILDING" => "BLDG",
    "DEPARTMENT" => "DEPT",
    "FLOOR" => "FL",
    "FRONT" => "FRNT",
    "HANGAR" => "HNGR",
    "LOBBY" => "LBBY",
    "LOT" => "LOT",
    "LOWER" => "LOWR",
    "OFFICE"	=> "OFC",
    "PENTHOUSE" => "PH",
    "PIER" => "PIER",
    "REAR" => "REAR",
    "ROOM" => "RM",
    "SIDE" => "SIDE",
    "SLIP" => "SLIP",
    "SPACE" => "SPC",
    "STOP" => "STOP",
    "SUITE" => "STE",
    "TRAILER" => "TRLR",
    "UNIT" => "UNIT",
    "UPPER" => "UPPR"
  }

  #=============================================================================#
  # ObjectName: USPS_STREET_SUFFIX
  # Returns: HASH
  #
  # Description: Contains a list of Street Suffixes and their abbreviations
  #              from the United States Postal Service web site:
  #                 http:www.usps.com/ncsc/lookups/usps_abbreviations.html
  #
  # Usage examples: USPS_STREET_SUFFIX["DRIVE"] # => "DR"
  #                 USPS_STREET_SUFFIX.index "DR" #=> "DRIVE"
  #=============================================================================#
  USPS_STREET_SUFFIX = {
    'ALLEY' =>'ALY',
    'ANNEX' => ' ANX',
    'ARCADE' => 'ARC',
    'AVENUE' => 'AVE',
    'BAYOO' => 'BYU',
    'BEACH' => 'BCH',
    'BEND' => 'BND',
    'BLUFF' => 'BLF',
    'BLUFFS' => 'BLFS',
    'BOTTOM' => 'BTM',
    'BOULEVARD' => 'BLVD',
    'BRANCH' => 'BR',
    'BRIDGE' => 'BRG',
    'BROOK' => 'BRK',
    'BROOKS' => 'BRKS',
    'BURG' => 'BG',
    'BURGS' => 'BGS',
    'BYPASS' => 'BYP',
    'CAMP' => 'CP',
    'CANYON' => 'CYN',
    'CAPE' => 'CPE',
    'CAUSEWAY' => 'CSWY',
    'CENTER' => 'CTR',
    'CENTERS' => 'CTRS',
    'CIRCLE' => 'CIR',
    'CIRCLES' => 'CIRS',
    'CLIFF' => 'CLF',
    'CLIFFS' => 'CLFS',
    'CLUB' => 'CLB',
    'COMMON' => 'CMN',
    'CORNER' => 'COR',
    'CORNERS' => 'CORS',
    'COURSE' => 'CRSE',
    'COURT' => 'CT',
    'COURTS' => 'CTS',
    'COVE' => 'CV',
    'COVES' => 'CVS',
    'CREEK' => 'CRK',
    'CRESCENT' => 'CRES',
    'CREST' => 'CRST',
    'CROSSING' => 'XING',
    'CROSSROAD' => 'XRD',
    'CURVE' => 'CURV',
    'DALE' => 'DL',
    'DAM' => 'DM',
    'DIVIDE' => 'DV',
    'DRIVE' => 'DR',
    'DRIVES' => 'DRS',
    'ESTATE' => 'EST',
    'ESTATES' => 'ESTS',
    'EXPRESSWAY' => 'EXPY',
    'EXTENSION' => 'EXT',
    'EXTENSIONS' => 'EXTS',
    'FALL' => 'FALL',
    'FALLS' => 'FLS',
    'FERRY' => 'FRY',
    'FIELD' => 'FLD',
    'FIELDS' => 'FLDS',
    'FLAT' => 'FLT',
    'FLATS' => 'FLTS',
    'FORD' => 'FRD',
    'FORDS' => 'FRDS',
    'FOREST' => 'FRST',
    'FORGE' => 'FRG',
    'FORGES' => 'FRGS',
    'FORK' => 'FRK',
    'FORKS' => 'FRKS',
    'FORT' => 'FT',
    'FREEWAY' => 'FWY',
    'GARDEN' => 'GDN',
    'GARDENS' => 'GDNS',
    'GATEWAY' => 'GTWY',
    'GLEN' => 'GLN',
    'GLENS' => 'GLNS',
    'GREEN' => 'GRN',
    'GREENS' => 'GRNS',
    'GROVE' => 'GRV',
    'GROVES' => 'GRVS',
    'HARBOR' => 'HBR',
    'HARBORS' => 'HBRS',
    'HAVEN' => 'HVN',
    'HEIGHTS' => 'HTS',
    'HIGHWAY' => 'HWY',
    'HILL' => 'HL',
    'HILLS' => 'HLS',
    'HOLLOW' => 'HOLW',
    'INLET' => 'INLT',
    'ISLAND' => 'IS',
    'ISLANDS' => 'ISS',
    'ISLE' => 'ISLE',
    'JUNCTION' => 'JCT',
    'JUNCTIONS' => 'JCTS',
    'KEY' => 'KY',
    'KEYS' => 'KYS',
    'KNOLL' => 'KNL',
    'KNOLLS' => 'KNLS',
    'LAKE ' => 'LK',
    'LAKES' => 'LKS',
    'LAND' => 'LAND',
    'LANDING' => 'LNDG',
    'LANE' => 'LN',
    'LIGHT' => 'LGT',
    'LIGHTS' => 'LGTS',
    'LOAF' => 'LF',
    'LOCK' => 'LCK',
    'LOCKS' => 'LCKS',
    'LODGE' => 'LDG',
    'LOOP' => 'LOOP',
    'MALL' => 'MALL',
    'MANOR' => 'MNR',
    'MANORS' => 'MNRS',
    'MEADOW' => 'MDW',
    'MEADOWS' => 'MDWS',
    'MEWS' => '	MEWS',
    'MILL' => 'ML',
    'MILLS' => 'MLS',
    'MISSION' => 'MSN',
    'MOTORWAY' => 'MTWY',
    'MOUNT' => 'MT',
    'MOUNTAIN' => 'MTN',
    'MOUNTAINS' => 'MTNS',
    'NECK' => 'NCK',
    'ORCHARD' => 'ORCH',
    'OVAL' => 'OVAL',
    'OVERPASS' => 'OPAS',
    'PARK' => 'PARK',
    'PARKWAY' => 'PKWY',
    'PARKWAYS' => 'PKWY',
    'PASS' => 'PASS',
    'PASSAGE' => 'PSGE',
    'PATH' => 'PATH',
    'PIKE' => 'PIKE',
    'PINE' => 'PNE',
    'PINES' => 'PNES',
    'PLACE' => 'PL',
    'PLAIN' => 'PLN',
    'PLAINS' => 'PLNS',
    'PLAZA' => 'PLZ',
    'POINT' => 'PT',
    'POINTS' => 'PTS',
    'PORT' => 'PRT',
    'PORTS' => 'PRTS',
    'PRAIRIE' => 'PR',
    'RADIAL' => 'RADL',
    'RAMP' => 'RAMP',
    'RANCH' => 'RNCH',
    'RAPID' => 'RPD',
    'RAPIDS' => 'RPDS',
    'REST' => 'RST',
    'RIDGE' => 'RDG',
    'RIDGES' => 'RDGS',
    'RIVER' => 'RIV',
    'ROAD' => 'RD',
    'ROADS' => 'RDS',
    'ROUTE' => 'RTE',
    'ROW' => 'ROW',
    'RUE' => 'RUE',
    'RUN' => 'RUN',
    'SHOAL' => 'SHL',
    'SHOALS' => 'SHLS',
    'SHORE' => 'SHR',
    'SHORES' => 'SHRS',
    'SKYWAY' => 'SKWY',
    'SPRING' => 'SPG',
    'SPRINGS' => 'SPGS',
    'SPUR' => 'SPUR',
    'SPURS' => 'SPUR',
    'SQUARE' => 'SQ',
    'SQUARES' => 'SQS',
    'STATION' => 'STA',
    'STRAVENUE' => 'STRA',
    'STREAM' => 'STRM',
    'STREET' => 'ST',
    'STREETS' => 'STS',
    'SUMMIT' => 'SMT',
    'TERRACE' => 'TER',
    'THROUGHWAY' => 'TRWY',
    'TRACE' => 'TRCE',
    'TRACK' => 'TRAK',
    'TRAFFICWAY' => 'TRFY',
    'TRAIL' => 'TRL',
    'TUNNEL' => 'TUNL',
    'TURNPIKE' => 'TPKE',
    'UNDERPASS' => 'UPAS',
    'UNION' => 'UN',
    'UNIONS' => 'UNS',
    'VALLEY' => 'VLY',
    'VALLEYS' => 'VLYS',
    'VIADUCT' => 'VIA',
    'VIEW' => 'VW',
    'VIEWS' => 'VWS',
    'VILLAGE' => 'VLG',
    'VILLAGES' => 'VLGS',
    'VILLE' => 'VL',
    'VISTA' => 'VIS',
    'WALK' => 'WALK',
    'WALKS' => 'WALK',
    'WALL' => 'WALL',
    'WAY' => 'WAY',
    'WAYS' => 'WAYS',
    'WELL' => 'WL',
    'WELLS' => 'WLS'
  }

  #=============================================================================#
  # ObjectName: COUNTRY_CODES
  # Returns: Hash
  #
  # Description: Contains a list of ISO 3166 3-character codes abbreviations.
  #
  #              From the web site:
  #                   http://www.iso.org/iso/home/standards/country_codes.htm
  #
  # Usage examples: COUNTRY_CODES["USA"] # : "United States of America"
  #                 COUNTRY_CODES_ABBREVIATION["United Arab Emirates"] #: "UAE"
  #=============================================================================#
  COUNTRY_CODES = {
    "Afghanistan" => "AFG",
    "Aland Islands" => "ALA",
    "Albania" => "ALB",
    "Algeria" => "DZA",
    "American Samoa" => "ASM",
    "Andorra" => "AND",
    "Angola" => "AGO",
    "Anguilla" => "AIA",
    "Antarctica" => "ATA",
    "Antigua and Barbuda" => "ATG",
    "Argentina" => "ARG",
    "Armenia" => "ARM",
    "Aruba" => "ABW",
    "Australia" => "AUS",
    "Austria" => "AUT",
    "Azerbaijan" => "AZE",
    "Bahamas" => "BHS",
    "Bahrain" => "BHR",
    "Bangladesh" => "BGD",
    "Barbados" => "BRB",
    "Belarus" => "BLR",
    "Belgium" => "BEL",
    "Belize" => "BLZ",
    "Benin" => "BEN",
    "Bermuda" => "BMU",
    "Bhutan" => "BTN",
    "Bolivia" => "BOL",
    "Bosnia and Herzegovina" => "BIH",
    "Botswana" => "BWA",
    "Bouvet Island" => "BVT",
    "Brazil" => "BRA",
    "British Indian Ocean Territory" => "IOT",
    "British Virgin Islands" => "VGB",
    "Brunei Darussalam" => "BRN",
    "Bulgaria" => "BGR",
    "Burkina Faso" => "BFA",
    "Burundi" => "BDI",
    "Cambodia" => "KHM",
    "Cameroon" => "CMR",
    "Canada" => "CAN",
    "Cape Verde" => "CPV",
    "Cayman Islands" => "CYM",
    "Central African Republic" => "CAF",
    "Chad" => "TCD",
    "Chile" => "CHL",
    "China" => "CHN",
    "Christmas Island" => "CXR",
    "Cocos (Keeling) Islands" => "CCK",
    "Colombia" => "COL",
    "Comoros" => "COM",
    "Congo (Brazzaville)" => "COG",
    "Democratic Republic of the Congo" => "COD",
    "Cook Islands" => "COK",
    "Costa Rica" => "CRI",
    "Croatia" => "HRV",
    "Cuba" => "CUB",
    "Cyprus" => "CYP",
    "Czech Republic" => "CZE",
    "C_te d'Ivoire" => "CIV",
    "Denmark" => "DNK",
    "Djibouti" => "DJI",
    "Dominica" => "DMA",
    "Dominican Republic" => "DOM",
    "Ecuador" => "ECU",
    "Egypt" => "EGY",
    "El Salvador" => "SLV",
    "Equatorial Guinea" => "GNQ",
    "Eritrea" => "ERI",
    "Estonia" => "EST",
    "Ethiopia" => "ETH",
    "Falkland Islands (Malvinas)" => "FLK",
    "Faroe Islands" => "FRO",
    "Fiji" => "FJI",
    "Finland" => "FIN",
    "France" => "FRA",
    "French Guiana" => "GUF",
    "French Polynesia" => "PYF",
    "French Southern Territories" => "ATF",
    "Gabon" => "GAB",
    "Gambia" => "GMB",
    "Georgia" => "GEO",
    "Germany" => "DEU",
    "Ghana" => "GHA",
    "Gibraltar" => "GIB",
    "Greece" => "GRC",
    "Greenland" => "GRL",
    "Grenada" => "GRD",
    "Guadeloupe" => "GLP",
    "Guam" => "GUM",
    "Guatemala" => "GTM",
    "Guernsey" => "GGY",
    "Guinea" => "GIN",
    "Guinea-Bissau" => "GNB",
    "Guyana" => "GUY",
    "Haiti" => "HTI",
    "Heard Island and Mcdonald Islands" => "HMD",
    "Holy See (Vatican City State)" => "VAT",
    "Honduras" => "HND",
    "Hong Kong, Special Administrative Region of China" => "HKG",
    "Hungary" => "HUN",
    "Iceland" => "ISL",
    "India" => "IND",
    "Indonesia" => "IDN",
    "Islamic Republic of Iran" => "IRN",
    "Iraq" => "IRQ",
    "Ireland" => "IRL",
    "Isle of Man" => "IMN",
    "Israel" => "ISR",
    "Italy" => "ITA",
    "Jamaica" => "JAM",
    "Japan" => "JPN",
    "Jersey" => "JEY",
    "Jordan" => "JOR",
    "Kazakhstan" => "KAZ",
    "Kenya" => "KEN",
    "Kiribati" => "KIR",
    "Democratic People's Republic of Korea" => "PRK",
    "Republic of Korea" => "KOR",
    "Kuwait" => "KWT",
    "Kyrgyzstan" => "KGZ",
    "Lao PDR" => "LAO",
    "Latvia" => "LVA",
    "Lebanon" => "LBN",
    "Lesotho" => "LSO",
    "Liberia" => "LBR",
    "Libya" => "LBY",
    "Liechtenstein" => "LIE",
    "Lithuania" => "LTU",
    "Luxembourg" => "LUX",
    "Macao, Special Administrative Region of China" => "MAC",
    "Republic of Macedonia" => "MKD",
    "Madagascar" => "MDG",
    "Malawi" => "MWI",
    "Malaysia" => "MYS",
    "Maldives" => "MDV",
    "Mali" => "MLI",
    "Malta" => "MLT",
    "Marshall Islands" => "MHL",
    "Martinique" => "MTQ",
    "Mauritania" => "MRT",
    "Mauritius" => "MUS",
    "Mayotte" => "MYT",
    "Mexico" => "MEX",
    "Federated States of Micronesia" => "FSM",
    "Moldova" => "MDA",
    "Monaco" => "MCO",
    "Mongolia" => "MNG",
    "Montenegro" => "MNE",
    "Montserrat" => "MSR",
    "Morocco" => "MAR",
    "Mozambique" => "MOZ",
    "Myanmar" => "MMR",
    "Namibia" => "NAM",
    "Nauru" => "NRU",
    "Nepal" => "NPL",
    "Netherlands" => "NLD",
    "Netherlands Antilles" => "ANT",
    "New Caledonia" => "NCL",
    "New Zealand" => "NZL",
    "Nicaragua" => "NIC",
    "Niger" => "NER",
    "Nigeria" => "NGA",
    "Niue" => "NIU",
    "Norfolk Island" => "NFK",
    "Northern Mariana Islands" => "MNP",
    "Norway" => "NOR",
    "Oman" => "OMN",
    "Pakistan" => "PAK",
    "Palau" => "PLW",
    "Palestinian Territory, Occupied" => "PSE",
    "Panama" => "PAN",
    "Papua New Guinea" => "PNG",
    "Paraguay" => "PRY",
    "Peru" => "PER",
    "Philippines" => "PHL",
    "Pitcairn" => "PCN",
    "Poland" => "POL",
    "Portugal" => "PRT",
    "Puerto Rico" => "PRI",
    "Qatar" => "QAT",
    "Romania" => "ROU",
    "Russian Federation" => "RUS",
    "Rwanda" => "RWA",
    "R Union" => "REU",
    "Saint Helena" => "SHN",
    "Saint Kitts and Nevis" => "KNA",
    "Saint Lucia" => "LCA",
    "Saint Pierre and Miquelon" => "SPM",
    "Saint Vincent and Grenadines" => "VCT",
    "Saint-Barth Lemy" => "BLM",
    "Saint-Martin (French)" => "MAF",
    "Samoa" => "WSM",
    "San Marino" => "SMR",
    "Sao Tome and Principe" => "STP",
    "Saudi Arabia" => "SAU",
    "Senegal" => "SEN",
    "Serbia" => "SRB",
    "Seychelles" => "SYC",
    "Sierra Leone" => "SLE",
    "Singapore" => "SGP",
    "Slovakia" => "SVK",
    "Slovenia" => "SVN",
    "Solomon Islands" => "SLB",
    "Somalia" => "SOM",
    "South Africa" => "ZAF",
    "South Georgia and the South Sandwich Islands" => "SGS",
    "South Sudan" => "SSD",
    "Spain" => "ESP",
    "Sri Lanka" => "LKA",
    "Sudan" => "SDN",
    "Suriname" => "SUR",
    "Svalbard and Jan Mayen Islands" => "SJM",
    "Swaziland" => "SWZ",
    "Sweden" => "SWE",
    "Switzerland" => "CHE",
    "Syrian Arab Republic (Syria)" => "SYR",
    "Taiwan, Republic of China" => "TWN",
    "Tajikistan" => "TJK",
    "United Republic of Tanzania" => "TZA",
    "Thailand" => "THA",
    "Timor-Leste" => "TLS",
    "Togo" => "TGO",
    "Tokelau" => "TKL",
    "Tonga" => "TON",
    "Trinidad and Tobago" => "TTO",
    "Tunisia" => "TUN",
    "Turkey" => "TUR",
    "Turkmenistan" => "TKM",
    "Turks and Caicos Islands" => "TCA",
    "Tuvalu" => "TUV",
    "Uganda" => "UGA",
    "Ukraine" => "UKR",
    "United Arab Emirates" => "ARE",
    "United Kingdom" => "GBR",
    "United States Minor Outlying Islands" => "UMI",
    "United States of America" => "USA",
    "Uruguay" => "URY",
    "Uzbekistan" => "UZB",
    "Vanuatu" => "VUT",
    "Venezuela (Bolivarian Republic of)" => "VEN",
    "Viet Nam" => "VNM",
    "Virgin Islands, US" => "VIR",
    "Wallis and Futuna Islands" => "WLF",
    "Western Sahara" => "ESH",
    "Yemen" => "YEM",
    "Zambia" => "ZMB",
    "Zimbabwe" => "ZWE"
  }

  # Hash with the keys and values flipped
  COUNTRY_CODES_ABBREVIATION = COUNTRY_CODES.invert

  #=============================================================================#
  # ObjectName: COUNTRY_CODES_2CHAR
  # Returns: Hash
  #
  # Description: Contains a list of ISO 3166 2-character codes abbreviations.
  #
  #              From the web site:
  #                   http://www.iso.org/iso/home/standards/country_codes.htm
  #
  # Usage examples: COUNTRY_CODES_2CHAR["US"] # : "United States"
  #                 COUNTRY_CODES_2CHAR_ABBREVIATION["United Arab Emirates"] #: "AE"
  #=============================================================================#
  COUNTRY_CODES_2CHAR = {
    "Afghanistan" => "AF",
    "Aland Islands" => "AX",
    "Albania" => "AL",
    "Algeria" => "DZ",
    "American Samoa" => "AS",
    "Andorra" => "AD",
    "Angola" => "AO",
    "Anguilla" => "AI",
    "Antarctica" => "AQ",
    "Antigua and Barbuda" => "AG",
    "Argentina" => "AR",
    "Armenia" => "AM",
    "Aruba" => "AW",
    "Australia" => "AU",
    "Austria" => "AT",
    "Azerbaijan" => "AZ",
    "Bahamas" => "BS",
    "Bahrain" => "BH",
    "Bangladesh" => "BD",
    "Barbados" => "BB",
    "Belarus" => "BY",
    "Belgium" => "BE",
    "Belize" => "BZ",
    "Bermuda" => "BM",
    "Bhutan" => "BT",
    "Bolivia" => "BO",
    "Botswana" => "BW",
    "Bouvet Island" => "BV",
    "Brazil" => "BR",
    "British Indian Ocean Territory" => "IO",
    "British Virgin Islands" => "VG",
    "Brunei Darussalam" => "BN",
    "Bulgaria" => "BG",
    "Burkina Faso" => "BF",
    "Burundi" => "BI",
    "Cambodia" => "KH",
    "Cameroon" => "CM",
    "Canada" => "CA",
    "Cape Verde" => "CV",
    "Cayman Islands" => "KY",
    "Central African Republic" => "CF",
    "Chad" => "TD",
    "Chile" => "CL",
    "China" => "CN",
    "Christmas Island" => "CX",
    "Cocos (Keeling) Islands" => "CC",
    "Colombia" => "CO",
    "Comoros" => "KM",
    "Congo_(Brazzaville)" => "CG",
    "Democratic Republic of the Congo" => "CD",
    "Cook Islands" => "CK",
    "Costa Rica" => "CR",
    "Croatia" => "HR",
    "Cuba" => "CU",
    "Cyprus" => "CY",
    "Czech Republic" => "CZ",
    "C_te d'Ivoire" => "CI",
    "Denmark" => "DK",
    "Djibouti" => "DJ",
    "Dominica" => "DM",
    "Dominican Republic" => "DO",
    "Ecuador" => "EC",
    "Egypt" => "EG",
    "El Salvador" => "SV",
    "Equatorial Guinea" => "GQ",
    "Eritrea" => "ER",
    "Estonia" => "EE",
    "Ethiopia" => "ET",
    "Falkland Islands (Malvinas)" => "FK",
    "Faroe Islands" => "FO",
    "Fiji" => "FJ",
    "Finland" => "FI",
    "France" => "FR",
    "French Guiana" => "GF",
    "French Polynesia" => "PF",
    "French Southern Territories" => "TF",
    "Gabon" => "GA",
    "Gambia" => "GM",
    "Georgia" => "GE",
    "Germany" => "DE",
    "Ghana" => "GH",
    "Gibraltar" => "GI",
    "Greece" => "GR",
    "Greenland" => "GL",
    "Grenada" => "GD",
    "Guadeloupe" => "GP",
    "Guam" => "GU",
    "Guatemala" => "GT",
    "Guernsey" => "GG",
    "Guinea" => "GN",
    "Guinea-Bissau" => "GW",
    "Guyana" => "GY",
    "Haiti" => "HT",
    "Heard Island and Mcdonald Islands" => "HM",
    "Holy See (Vatican City State)" => "VA",
    "Honduras" => "HN",
    "Hong Kong, Special Administrative Region of China" => "HK",
    "Hungary" => "HU",
    "Iceland" => "IS",
    "India" => "IN",
    "Indonesia" => "ID",
    "Islamic Republic of Iran" => "IR",
    "Iraq" => "IQ",
    "Ireland" => "IE",
    "Isle of Man" => "IM",
    "Israel" => "IL",
    "Italy" => "IT",
    "Jamaica" => "JM",
    "Japan" => "JP",
    "Jersey" => "JE",
    "Jordan" => "JO",
    "Kazakhstan" => "KZ",
    "Kenya" => "KE",
    "Kiribati" => "KI",
    "Democratic People's Republic of Korea" => "KP",
    "Republic of Korea" => "KR",
    "Kuwait" => "KW",
    "Kyrgyzstan" => "KG",
    "Lao PDR" => "LA",
    "Latvia" => "LV",
    "Lebanon" => "LB",
    "Lesotho" => "LS",
    "Liberia" => "LR",
    "Libya" => "LY",
    "Liechtenstein" => "LI",
    "Lithuania" => "LT",
    "Luxembourg" => "LU",
    "Macao, Special Administrative Region of China" => "MO",
    "Republic of Macedonia" => "MK",
    "Madagascar" => "MG",
    "Malawi" => "MW",
    "Malaysia" => "MY",
    "Maldives" => "MV",
    "Mali" => "ML",
    "Malta" => "MT",
    "Marshall Islands" => "MH",
    "Martinique" => "MQ",
    "Mauritania" => "MR",
    "Mauritius" => "MU",
    "Mayotte" => "YT",
    "Mexico" => "MX",
    "Federated States of Micronesia" => "FM",
    "Moldova" => "MD",
    "Monaco" => "MC",
    "Mongolia" => "MN",
    "Montenegro" => "ME",
    "Montserrat" => "MS",
    "Morocco" => "MA",
    "Mozambique" => "MZ",
    "Myanmar" => "MM",
    "Namibia" => "NA",
    "Nauru" => "NR",
    "Nepal" => "NP",
    "Netherlands" => "NL",
    "Netherlands Antilles" => "AN",
    "New Caledonia" => "NC",
    "New Zealand" => "NZ",
    "Nicaragua" => "NI",
    "Niger" => "NE",
    "Nigeria" => "NG",
    "Niue" => "NU",
    "Norfolk Island" => "NF",
    "Northern Mariana Islands" => "MP",
    "Norway" => "NO",
    "Oman" => "OM",
    "Pakistan" => "PK",
    "Palau" => "PW",
    "Palestinian Territory, Occupied" => "PS",
    "Panama" => "PA",
    "Papua New Guinea" => "PG",
    "Paraguay" => "PY",
    "Peru" => "PE",
    "Philippines" => "PH",
    "Pitcairn" => "PN",
    "Poland" => "PL",
    "Portugal" => "PT",
    "Puerto Rico" => "PR",
    "Qatar" => "QA",
    "Romania" => "RO",
    "Russian Federation" => "RU",
    "Rwanda" => "RW",
    "R Union" => "RE",
    "Saint Helena" => "SH",
    "Saint Kitts and Nevis" => "KN",
    "Saint Lucia" => "LC",
    "Saint Pierre and Miquelon" => "PM",
    "Saint Vincent and Grenadines" => "VC",
    "Saint-Barth lemy" => "BL",
    "Saint-Martin (French)" => "MF",
    "Samoa" => "WS",
    "San Marino" => "SM",
    "Sao Tome and Principe" => "ST",
    "Saudi Arabia" => "SA",
    "Senegal" => "SN",
    "Serbia" => "RS",
    "Seychelles" => "SC",
    "Sierra Leone" => "SL",
    "Singapore" => "SG",
    "Slovakia" => "SK",
    "Slovenia" => "SI",
    "Solomon Islands" => "SB",
    "Somalia" => "SO",
    "South Africa" => "ZA",
    "South Georgia and the South Sandwich Islands" => "GS",
    "South Sudan" => "SS",
    "Spain" => "ES",
    "Sri Lanka" => "LK",
    "Sudan" => "SD",
    "Suriname_*" => "SR",
    "Svalbard and Jan Mayen Islands" => "SJ",
    "Swaziland" => "SZ",
    "Sweden" => "SE",
    "Switzerland" => "CH",
    "Syrian Arab Republic" => "SY",
    "Taiwan, Republic of China" => "TW",
    "Tajikistan" => "TJ",
    "United Republic of Tanzania" => "TZ",
    "Thailand" => "TH",
    "Timor-Leste" => "TL",
    "Togo" => "TG",
    "Tokelau" => "TK",
    "Tonga" => "TO",
    "Trinidad and Tobago" => "TT",
    "Tunisia" => "TN",
    "Turkey" => "TR",
    "Turkmenistan" => "TM",
    "Turks and Caicos Islands" => "TC",
    "Tuvalu" => "TV",
    "Uganda" => "UG",
    "Ukraine" => "UA",
    "United Arab Emirates" => "AE",
    "United Kingdom" => "GB",
    "United States Minor Outlying Islands" => "UM",
    "United States of America" => "US",
    "Uruguay" => "UY",
    "Uzbekistan" => "UZ",
    "Vanuatu" => "VU",
    "Venezuela (Bolivarian Republic of)" => "VE",
    "Viet Nam" => "VN",
    "Virgin Islands, US" => "VI",
    "Wallis and Futuna Islands" => "WF",
    "Western Sahara" => "EH",
    "Yemen" => "YE",
    "Zambia" => "ZM",
    "Zimbabwe" => "ZW"
  }

  # Hash with the keys and values flipped
  COUNTRY_CODES_2CHAR_ABBREVIATION = COUNTRY_CODES_2CHAR.invert

  #=============================================================================#
  # ObjectName: LANGUAGE_CODES_2CHAR
  # Returns: Hash
  #
  # Description: Contains a list of ISO 639-2 2-character language codes abbreviations.
  #
  #              From the web site:
  #                   http://www.iso.org/iso/home/standards/language_codes.htm
  #
  # Usage examples: LANGUAGECODES_2CHAR["en"] # : "English"
  #                 LANGUAGE_CODES_2CHAR_ABBREVIATION["English"] #: "en"
  #=============================================================================#
  LANGUAGE_CODES_2CHAR = {
    "AB" => "Abkhazian",
    "AA" => "Afar",
    "AF" => "Afrikaans",
    "SQ" => "Albanian",
    "AM" => "Amharic",
    "AR" => "Arabic",
    "HY" => "Armenian",
    "AS" => "Assamese",
    "AY" => "Aymara",
    "AZ" => "Azerbaijani",
    "BA" => "Bashkir",
    "EU" => "Basque",
    "BN" => "Bengali",
    "DZ" => "Bhutani",
    "BH" => "Bihari",
    "BI" => "Bislama",
    "BR" => "Breton",
    "BG" => "Bulgarian",
    "MY" => "Burmese",
    "BE" => "Byelorussian",
    "KM" => "Cambodian",
    "CA" => "Catalan",
    "ZH" => "Chinese",
    "CO" => "Corsican",
    "HR" => "Croatian",
    "CS" => "Czech",
    "DA" => "Danish",
    "NL" => "Dutch",
    "EN" => "English,American",
    "EO" => "Esperanto",
    "ET" => "Estonian",
    "FO" => "Faeroese",
    "FJ" => "Fiji",
    "FI" => "Finnish",
    "FR" => "French",
    "FY" => "Frisian",
    "GD" => "Gaelic",
    "GL" => "Galician",
    "KA" => "Georgian",
    "DE" => "German",
    "EL" => "Greek",
    "KL" => "Greenlandic",
    "GN" => "Guarani",
    "GU" => "Gujarati",
    "HA" => "Hausa",
    "IW" => "Hebrew",
    "HI" => "Hindi",
    "HU" => "Hungarian",
    "IS" => "Icelandic",
    "IN" => "Indonesian",
    "IA" => "Interlingua",
    "IE" => "Interlingue",
    "IK" => "Inupiak",
    "GA" => "Irish",
    "IT" => "Italian",
    "JA" => "Japanese",
    "JW" => "Javanese",
    "KN" => "Kannada",
    "KS" => "Kashmiri",
    "KK" => "Kazakh",
    "RW" => "Kinyarwanda",
    "KY" => "Kirghiz",
    "RN" => "Kirundi",
    "KO" => "Korean",
    "KU" => "Kurdish",
    "LO" => "Laothian",
    "LA" => "Latin",
    "LV" => "Latvian,",
    "LN" => "Lingala",
    "LT" => "Lithuanian",
    "MK" => "Macedonian",
    "MG" => "Malagasy",
    "MS" => "Malay",
    "ML" => "Malayalam",
    "MT" => "Maltese",
    "MI" => "Maori",
    "MR" => "Marathi",
    "MO" => "Moldavian",
    "MN" => "Mongolian",
    "NA" => "Nauru",
    "NE" => "Nepali",
    "NO" => "Norwegian",
    "OC" => "Occitan",
    "OR" => "Oriya",
    "OM" => "Oromo,",
    "PS" => "Pashto",
    "FA" => "Persian",
    "PL" => "Polish",
    "PT" => "Portuguese",
    "PA" => "Punjabi",
    "QU" => "Quechua",
    "RM" => "Rhaeto-Romance",
    "RO" => "Romanian",
    "RU" => "Russian",
    "SM" => "Samoan",
    "SG" => "Sangro",
    "SA" => "Sanskrit",
    "SR" => "Serbian",
    "SH" => "Serbo-Croatian",
    "ST" => "Sesotho",
    "TN" => "Setswana",
    "SN" => "Shona",
    "SD" => "Sindhi",
    "SI" => "Singhalese",
    "SS" => "Siswati",
    "SK" => "Slovak",
    "SL" => "Slovenian",
    "SO" => "Somali",
    "ES" => "Spanish",
    "SU" => "Sudanese",
    "SW" => "Swahili",
    "SV" => "Swedish",
    "TL" => "Tagalog",
    "TG" => "Tajik",
    "TA" => "Tamil",
    "TT" => "Tatar",
    "TE" => "Tegulu",
    "TH" => "Thai",
    "BO" => "Tibetan",
    "TI" => "Tigrinya",
    "TO" => "Tonga",
    "TS" => "Tsonga",
    "TR" => "Turkish",
    "TK" => "Turkmen",
    "TW" => "Twi",
    "UK" => "Ukrainian",
    "UR" => "Urdu",
    "UZ" => "Uzbek",
    "VI" => "Vietnamese",
    "VO" => "Volapuk",
    "CY" => "Welsh",
    "WO" => "Wolof",
    "XH" => "Xhosa",
    "JI" => "Yiddish",
    "YO" => "Yoruba",
    "ZU" => "Zulu"
  }

  # Hash with the keys and values flipped
  LANGUAGE_CODES_2CHAR_ABBREVIATION = LANGUAGE_CODES_2CHAR.invert

  #=============================================================================#
  # ObjectName: LANGUAGE_CODES_3CHAR
  # Returns: Hash
  #
  # Description: Contains a list of ISO 639-3 3-character language codes abbreviations.
  #
  #              From the web site:
  #                   http://www.iso.org/iso/home/standards/language_codes.htm
  #
  # Usage examples: LANGUAGECODES_3CHAR["eng"] # : "English"
  #                 LANGUAGE_CODES_3CHAR_ABBREVIATION["English"] #: "eng"
  #=============================================================================#
  LANGUAGE_CODES_3CHAR = {
    "aar" => "Afar",
    "abk" => "Abkhazian",
    "ace" => "Achinese",
    "ach" => "Acoli",
    "ada" => "Adangme",
    "ady" => "Adyghe",
    "afa" => "Afro-Asiatic",
    "afh" => "Afrihili",
    "afr" => "Afrikaans",
    "ain" => "Ainu",
    "aka" => "Akan",
    "akk" => "Akkadian",
    "alb" => "Albanian",
    "sqi" => "Albanian",
    "ale" => "Aleut",
    "alg" => "Algonquian",
    "alt" => "Southern Altai",
    "amh" => "Amharic",
    "ang" => "English, Old",
    "anp" => "Angika",
    "apa" => "Apache",
    "ara" => "Arabic",
    "arc" => "Official Aramaic",
    "arg" => "Aragonese",
    "hye" => "Armenian",
    "arm" => "Armenian",
    "arn" => "Mapudungun",
    "arp" => "Arapaho",
    "art" => "Artificial",
    "arw" => "Arawak",
    "asm" => "Assamese",
    "ast" => "Asturian",
    "ath" => "Athapascan",
    "aus" => "Australian",
    "ava" => "Avaric",
    "ave" => "Avestan",
    "awa" => "Awadhi",
    "aym" => "Aymara",
    "aze" => "Azerbaijani",
    "bad" => "Banda",
    "bai" => "Bamileke",
    "bak" => "Bashkir",
    "bal" => "Baluchi",
    "bam" => "Bambara",
    "ban" => "Balinese",
    "eus" => "Basque",
    "baq" => "Basque",
    "bas" => "Basa",
    "bat" => "Baltic",
    "bej" => "Beja",
    "bel" => "Belarusian",
    "bem" => "Bemba",
    "ben" => "Bengali",
    "ber" => "Berber",
    "bho" => "Bhojpuri",
    "bih" => "Bihari",
    "bik" => "Bikol",
    "bin" => "Bini",
    "bis" => "Bislama",
    "bla" => "Siksika",
    "bnt" => "Bantu",
    "bos" => "Bosnian",
    "bra" => "Braj",
    "bre" => "Breton",
    "btk" => "Batak",
    "bua" => "Buriat",
    "bug" => "Buginese",
    "bul" => "Bulgarian",
    "bur" => "Burmese",
    "mya" => "Burmese",
    "byn" => "Blin",
    "cad" => "Caddo",
    "cai" => "Central American Indian",
    "car" => "Galibi Carib",
    "cat" => "Catalan",
    "cau" => "Caucasian",
    "ceb" => "Cebuano",
    "cel" => "Celtic",
    "cha" => "Chamorro",
    "chb" => "Chibcha",
    "che" => "Chechen",
    "chg" => "Chagatai",
    "chi" => "Chinese",
    "zho" => "Chinese",
    "chk" => "Chuukese",
    "chm" => "Mari",
    "chn" => "Chinook",
    "cho" => "Choctaw",
    "chp" => "Chipewyan",
    "chr" => "Cherokee",
    "chu" => "Church Slavic",
    "chv" => "Chuvash",
    "chy" => "Cheyenne",
    "cmc" => "Chamic",
    "cop" => "Coptic",
    "cor" => "Cornish",
    "cos" => "Corsican",
    "cpe" => "Creoles and pidgins, English based",
    "cpf" => "Creoles and pidgins, French-based",
    "cpp" => "Creoles and pidgins, Portuguese-based",
    "cre" => "Cree",
    "crh" => "Crimean Tatar",
    "crp" => "Creoles and pidgins",
    "csb" => "Kashubian",
    "cus" => "Cushitic",
    "cze" => "Czech",
    "ces" => "Czech",
    "dak" => "Dakota",
    "dan" => "Danish",
    "dar" => "Dargwa",
    "day" => "Land Dayak",
    "del" => "Delaware",
    "den" => "Slave (Athapascan)",
    "dgr" => "Dogrib",
    "din" => "Dinka",
    "div" => "Divehi",
    "doi" => "Dogri",
    "dra" => "Dravidian",
    "dsb" => "Lower Sorbian",
    "dua" => "Duala",
    "dum" => "Dutch, Middle",
    "nld" => "Dutch; Flemish",
    "dut" => "Dutch; Flemish",
    "dyu" => "Dyula",
    "dzo" => "Dzongkha",
    "efi" => "Efik",
    "egy" => "Egyptian",
    "eka" => "Ekajuk",
    "elx" => "Elamite",
    "eng" => "English",
    "enm" => "English, Middle",
    "epo" => "Esperanto",
    "est" => "Estonian",
    "ewe" => "Ewe",
    "ewo" => "Ewondo",
    "fan" => "Fang",
    "fao" => "Faroese",
    "fat" => "Fanti",
    "fij" => "Fijian",
    "fil" => "Filipino",
    "fin" => "Finnish",
    "fiu" => "Finno-Ugrian",
    "fon" => "Fon",
    "fre" => "French",
    "fra" => "French",
    "frm" => "French, Middle",
    "fro" => "French, Old",
    "frr" => "Northern Frisian",
    "frs" => "Eastern Frisian",
    "fry" => "Western Frisian",
    "ful" => "Fulah",
    "fur" => "Friulian",
    "gaa" => "Ga",
    "gay" => "Gayo",
    "gba" => "Gbaya",
    "gem" => "Germanic",
    "geo" => "Georgian",
    "kat" => "Georgian",
    "ger" => "German",
    "deu" => "German",
    "gez" => "Geez",
    "gil" => "Gilbertese",
    "gla" => "Gaelic",
    "gle" => "Irish",
    "glg" => "Galician",
    "glv" => "Manx",
    "gmh" => "German, Middle High",
    "goh" => "German, Old High",
    "gon" => "Gondi",
    "gor" => "Gorontalo",
    "got" => "Gothic",
    "grb" => "Grebo",
    "grc" => "Greek Ancient",
    "gre" => "Greek Modern",
    "ell" => "Greek Modern",
    "grn" => "Guarani",
    "gsw" => "Swiss German",
    "guj" => "Gujarati",
    "gwi" => "Gwich'in",
    "hai" => "Haida",
    "hat" => "Haitian",
    "hau" => "Hausa",
    "haw" => "Hawaiian",
    "heb" => "Hebrew",
    "her" => "Herero",
    "hil" => "Hiligaynon",
    "him" => "Himachali",
    "hin" => "Hindi",
    "hit" => "Hittite",
    "hmn" => "Hmong",
    "hmo" => "Hiri Motu",
    "hrv" => "Croatian",
    "hsb" => "Upper Sorbian",
    "hun" => "Hungarian",
    "hup" => "Hupa",
    "iba" => "Iban",
    "ibo" => "Igbo",
    "ice" => "Icelandic",
    "isl" => "Icelandic",
    "ido" => "Ido",
    "iii" => "Sichuan Yi",
    "ijo" => "Ijo",
    "iku" => "Inuktitut",
    "ile" => "Interlingue",
    "ilo" => "Iloko",
    "ina" => "Interlingua",
    "inc" => "Indic",
    "ind" => "Indonesian",
    "ine" => "Indo-European",
    "inh" => "Ingush",
    "ipk" => "Inupiaq",
    "ira" => "Iranian",
    "iro" => "Iroquoian",
    "ita" => "Italian",
    "jav" => "Javanese",
    "jbo" => "Lojban",
    "jpn" => "Japanese",
    "jpr" => "Judeo-Persian",
    "jrb" => "Judeo-Arabic",
    "kaa" => "Kara-Kalpak",
    "kab" => "Kabyle",
    "kac" => "Kachin",
    "kal" => "Kalaallisut",
    "kam" => "Kamba",
    "kan" => "Kannada",
    "kar" => "Karen",
    "kas" => "Kashmiri",
    "kau" => "Kanuri",
    "kaw" => "Kawi",
    "kaz" => "Kazakh",
    "kbd" => "Kabardian",
    "kha" => "Khasi",
    "khi" => "Khoisan",
    "khm" => "Central Khmer",
    "kho" => "Khotanese",
    "kik" => "Kikuyu",
    "kin" => "Kinyarwanda",
    "kir" => "Kirghiz",
    "kmb" => "Kimbundu",
    "kok" => "Konkani",
    "kom" => "Komi",
    "kon" => "Kongo",
    "kor" => "Korean",
    "kos" => "Kosraean",
    "kpe" => "Kpelle",
    "krc" => "Karachay-Balkar",
    "krl" => "Karelian",
    "kro" => "Kru",
    "kru" => "Kurukh",
    "kua" => "Kuanyama",
    "kum" => "Kumyk",
    "kur" => "Kurdish",
    "kut" => "Kutenai",
    "lad" => "Ladino",
    "lah" => "Lahnda",
    "lam" => "Lamba",
    "lao" => "Lao",
    "lat" => "Latin",
    "lav" => "Latvian",
    "lez" => "Lezghian",
    "lim" => "Limburgan",
    "lin" => "Lingala",
    "lit" => "Lithuanian",
    "lol" => "Mongo",
    "loz" => "Lozi",
    "ltz" => "Luxembourgish",
    "lua" => "Luba-Lulua",
    "lub" => "Luba-Katanga",
    "lug" => "Ganda",
    "lui" => "Luiseno",
    "lun" => "Lunda",
    "luo" => "Luo",
    "lus" => "Lushai",
    "mac" => "Macedonian",
    "mkd" => "Macedonian",
    "mad" => "Madurese",
    "mag" => "Magahi",
    "mah" => "Marshallese",
    "mai" => "Maithili",
    "mak" => "Makasar",
    "mal" => "Malayalam",
    "man" => "Mandingo",
    "mao" => "Maori",
    "mri" => "Maori",
    "map" => "Austronesian",
    "mar" => "Marathi",
    "mas" => "Masai",
    "may" => "Malay",
    "msa" => "Malay",
    "mdf" => "Moksha",
    "mdr" => "Mandar",
    "men" => "Mende",
    "mga" => "Irish, Middle",
    "mic" => "Mi'kmaq",
    "min" => "Minangkabau",
    "mis" => "Uncoded",
    "mkh" => "Mon-Khmer",
    "mlg" => "Malagasy",
    "mlt" => "Maltese",
    "mnc" => "Manchu",
    "mni" => "Manipuri",
    "mno" => "Manobo",
    "moh" => "Mohawk",
    "mon" => "Mongolian",
    "mos" => "Mossi",
    "mul" => "Multiple",
    "mun" => "Munda",
    "mus" => "Creek",
    "mwl" => "Mirandese",
    "mwr" => "Marwari",
    "myn" => "Mayan",
    "myv" => "Erzya",
    "nah" => "Nahuatl",
    "nai" => "North American Indian",
    "nap" => "Neapolitan",
    "nau" => "Nauru",
    "nav" => "Navajo",
    "nbl" => "South Ndebele",
    "nde" => "North Ndebele",
    "ndo" => "Ndonga",
    "nds" => "Low German",
    "nep" => "Nepali",
    "new" => "Nepal Bhasa",
    "nia" => "Nias",
    "nic" => "Niger-Kordofanian",
    "niu" => "Niuean",
    "nno" => "Norwegian",
    "nob" => "Bokm, Norwegian",
    "nog" => "Nogai",
    "non" => "Norse, Old",
    "nor" => "Norwegian",
    "nqo" => "N'Ko",
    "nso" => "Pedi",
    "nub" => "Nubian",
    "nwc" => "Classical Newari",
    "nya" => "Chichewa",
    "nym" => "Nyamwezi",
    "nyn" => "Nyankole",
    "nyo" => "Nyoro",
    "nzi" => "Nzima",
    "oci" => "Occitan",
    "oji" => "Ojibwa",
    "ori" => "Oriya",
    "orm" => "Oromo",
    "osa" => "Osage",
    "oss" => "Ossetian",
    "ota" => "Turkish, Ottoman",
    "oto" => "Otomian",
    "paa" => "Papuan",
    "pag" => "Pangasinan",
    "pal" => "Pahlavi",
    "pam" => "Pampanga",
    "pan" => "Panjabi",
    "pap" => "Papiamento",
    "pau" => "Palauan",
    "peo" => "Persian, Old ",
    "per" => "Persian",
    "fas" => "Persian",
    "phi" => "Philippine",
    "phn" => "Phoenician",
    "pli" => "Pali",
    "pol" => "Polish",
    "pon" => "Pohnpeian",
    "por" => "Portuguese",
    "pra" => "Prakrit",
    "pro" => "Proven, Old",
    "pus" => "Pushto",
    "que" => "Quechua",
    "raj" => "Rajasthani",
    "rap" => "Rapanui",
    "rar" => "Rarotongan",
    "roa" => "Romance",
    "roh" => "Romansh",
    "rom" => "Romany",
    "rum" => "Romanian",
    "ron" => "Romanian",
    "run" => "Rundi",
    "rup" => "Aromanian",
    "rus" => "Russian",
    "sad" => "Sandawe",
    "sag" => "Sango",
    "sah" => "Yakut",
    "sai" => "South American Indian",
    "sal" => "Salishan",
    "sam" => "Samaritan Aramaic",
    "san" => "Sanskrit",
    "sas" => "Sasak",
    "sat" => "Santali",
    "scn" => "Sicilian",
    "sco" => "Scots",
    "sel" => "Selkup",
    "sem" => "Semitic",
    "sga" => "Irish, Old",
    "sgn" => "Sign",
    "shn" => "Shan",
    "sid" => "Sidamo",
    "sin" => "Sinhala",
    "sio" => "Siouan",
    "sit" => "Sino-Tibetan",
    "sla" => "Slavic",
    "slo" => "Slovak",
    "slk" => "Slovak",
    "slv" => "Slovenian",
    "sma" => "Southern Sami",
    "sme" => "Northern Sami",
    "smi" => "Sami",
    "smj" => "Lule Sami",
    "smn" => "Inari Sami",
    "smo" => "Samoan",
    "sms" => "Skolt Sami",
    "sna" => "Shona",
    "snd" => "Sindhi",
    "snk" => "Soninke",
    "sog" => "Sogdian",
    "som" => "Somali",
    "son" => "Songhai",
    "sot" => "Sotho, Southern",
    "spa" => "Spanish",
    "srd" => "Sardinian",
    "srn" => "Sranan Tongo",
    "srp" => "Serbian",
    "srr" => "Serer",
    "ssa" => "Nilo-Saharan",
    "ssw" => "Swati",
    "suk" => "Sukuma",
    "sun" => "Sundanese",
    "sus" => "Susu",
    "sux" => "Sumerian",
    "swa" => "Swahili",
    "swe" => "Swedish",
    "syc" => "Classical Syriac",
    "syr" => "Syriac",
    "tah" => "Tahitian",
    "tai" => "Tai",
    "tam" => "Tamil",
    "tat" => "Tatar",
    "tel" => "Telugu",
    "tem" => "Timne",
    "ter" => "Tereno",
    "tet" => "Tetum",
    "tgk" => "Tajik",
    "tgl" => "Tagalog",
    "tha" => "Thai",
    "tib" => "Tibetan",
    "bod" => "Tibetan",
    "tig" => "Tigre",
    "tir" => "Tigrinya",
    "tiv" => "Tiv",
    "tkl" => "Tokelau",
    "tlh" => "Klingon",
    "tli" => "Tlingit",
    "tmh" => "Tamashek",
    "tog" => "Tonga (Nyasa)",
    "ton" => "Tonga (Tonga Islands)",
    "tpi" => "Tok Pisin",
    "tsi" => "Tsimshian",
    "tsn" => "Tswana",
    "tso" => "Tsonga",
    "tuk" => "Turkmen",
    "tum" => "Tumbuka",
    "tup" => "Tupi",
    "tur" => "Turkish",
    "tut" => "Altaic",
    "tvl" => "Tuvalu",
    "twi" => "Twi",
    "tyv" => "Tuvinian",
    "udm" => "Udmurt",
    "uga" => "Ugaritic",
    "uig" => "Uighur",
    "ukr" => "Ukrainian",
    "umb" => "Umbundu",
    "und" => "Undetermined",
    "urd" => "Urdu",
    "uzb" => "Uzbek",
    "vai" => "Vai",
    "ven" => "Venda",
    "vie" => "Vietnamese",
    "vol" => "Volap",
    "vot" => "Votic",
    "wak" => "Wakashan",
    "wal" => "Walamo",
    "war" => "Waray",
    "was" => "Washo",
    "wel" => "Welsh",
    "cym" => "Welsh",
    "wen" => "Sorbian",
    "wln" => "Walloon",
    "wol" => "Wolof",
    "xal" => "Kalmyk",
    "xho" => "Xhosa",
    "yao" => "Yao",
    "yap" => "Yapese",
    "yid" => "Yiddish",
    "yor" => "Yoruba",
    "ypk" => "Yupik",
    "zap" => "Zapotec",
    "zbl" => "Blissymbols",
    "zen" => "Zenaga",
    "zgh" => "Standard Moroccan Tamazight",
    "zha" => "Zhuang",
    "znd" => "Zande",
    "zul" => "Zulu",
    "zun" => "Zuni"
  }

  # Hash with the keys and values flipped
  LANGUAGE_CODES_3CHAR_ABBREVIATION = LANGUAGE_CODES_3CHAR.invert

  #=============================================================================#
  # ObjectName: MONTH_ABBREVIATION
  # Returns: HASH
  #
  # Description: Contains a list of month abbreviations and their full names
  #
  # Usage examples: MONTH_ABBREVIATION["December"] # => "dec"
  #                 MONTH_ABBREVIATION.index "dec" #=> "December"
  #=============================================================================#
  MONTH_ABBREVIATION = {
    "jan" => "Janurary",
    "feb" => "Feburary",
    "mar" => "March",
    "apr" => "April",
    "may" => "May",
    "jun" => "June",
    "jul" => "July",
    "aug" => "August",
    "sep" => "September",
    "oct" => "October",
    "nov" => "November",
    "dec" => "December"
  }

  # Hash with the keys and values flipped
  MONTHS = MONTH_ABBREVIATION.invert

  #=============================================================================#
  # ObjectName: COMMON_HTMLELEMENT_ATTRIBUTES
  # Returns: ARRAY
  #
  # Description: Contains the attributes that are common to each of the HTML Element
  #              These attributes are from WatirWebdriver's HTMLElement classes
  #
  #              Attributes deliberately omitted: spellcheck?, translate?
  #
  # Usage examples: COMMON_HTML_ATTRIBUTES = (COMMON_HTMLELEMENT_ATTRIBUTES + COMMON_HTML_ELEMENT_ATTRIBUTES).sort!
  #=============================================================================#
  COMMON_HTMLELEMENT_ATTRIBUTES =
  ["access_key", "access_key_label",
    "class", "command_checked?", "command_disabled?",  "command_hidden?", "command_icon",
    "command_label", "command_type", "content_editable?", "content_editable", "context_menu",
    "dataset", "dir", "draggable?", "dropzone",
    "hidden?",
    "item_id", "item_prop", "item_ref", "item_scope?", "item_type", "item_value",
    "lang",
    "onabort", "onautocomplete", "onautocompleteerror", "onblur", "oncancel", "oncanplay", "oncanplaythrough",
    "onchange", "onclick", "onclose", "oncontextmenu", "oncuechange", "ondblclick",
    "ondrag", "ondragend", "ondragenter", "ondragexit", "ondragleave", "ondragover", "ondragstart", "ondrop",
    "ondurationchange", "onemptied", "onended", "onerror", "onfocus", "oninput", "oninvalid",
    "onkeydown", "onkeypress", "onkeyup",
    "onload", "onloadeddata", "onloadedmetadata", "onloadstart",
    "onmousedown", "onmouseenter", "onmouseleave", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onmousewheel",
    "onpause", "onplay", "onplaying", "onprogress", "onratechange", "onreset", "onresize", "onscroll",
    "onseeked", "onseeking", "onselect", "onshow", "onsort", "onstalled", "onsubmit", "onsuspend", "ontimeupdate", "ontoggle", "onvolumechange", "onwaiting",
    "properties",
    "tab_index", "title"]

  #=============================================================================#
  # ObjectName: COMMON_HTML_ELEMENT_ATTRIBUTES
  # Returns: ARRAY
  #
  # Description: Contains the attributes that are common to each of the HTML Element
  #              These attributes are from WatirWebdriver's Element classes
  #
  #              Attributes deliberately omitted: exists?, tag_name,
  #
  # Usage examples: COMMON_HTML_ATTRIBUTES = (COMMON_HTMLELEMENT_ATTRIBUTES + COMMON_HTML_ELEMENT_ATTRIBUTES).sort!
  #=============================================================================#
  COMMON_HTML_ELEMENT_ATTRIBUTES =
  ["class_name",
    "enabled?", "focused?",
    "id", "inner_html",
    "outer_html",
    "present?",
    "text",
    "value", "visible?"]

  #=============================================================================#
  # ObjectName: COMMON_HTML_ATTRIBUTES
  # Returns: ARRAY
  #
  # Description: Contains the attributes that are common to each of the HTML TAG Elements
  #              In general these attributes are inherited from WatirWebdriver's
  #              HTMLElement, or Element classes.
  #
  # Usage examples: "button" => COMMON_HTML_ATTRIBUTES + ["other", "attributes", "specific", "to", "this", "tag"]
  #=============================================================================#
  COMMON_HTML_ATTRIBUTES = (COMMON_HTMLELEMENT_ATTRIBUTES + COMMON_HTML_ELEMENT_ATTRIBUTES).sort!

  #=============================================================================#
  # ObjectName: SUPPORTED_HTML_ATTRIBUTES
  # Returns: HASH
  #
  #
  # HTML Element = Watir Class
  # ---------------------------
  # a = Watir::Anchor
  # area = Watir::Area
  # br = Watir::BR
  # body = Watir::Body
  # button = Watir::Button
  # div = Watir::Div
  # form = Watir::Form
  # hr = Watir::HR
  # head = Watir::Head
  # img = Watir::Image
  # input = Watir::Input
  # label = Watir::Label
  # li = Watir::LI
  # map = Watir::Map
  # option = Watir::Option
  # p = Watir::Paragraph
  # pre = Watir::Pre
  # script = Watir::Script
  # select = Watir::Select
  # span = Watir::Span
  # style = Watir::Style
  # table = Watir::Table
  # td = Watir::TableDataCell
  # textarea = Watir::TextArea
  # th = Watir::TableHeaderCell
  # thead = Watir::TableSection  # a.k.a. t_head
  # ul = Watir::UList
  #
  # Description: Contains a list of attributes by HTML TAG Element
  #
  # Usage example: SUPPORTED_HTML_ATTRIBUTES["button"] # => ["accesskey", "class", "contenteditable", "dir", "hidden",
  #                                                           "id", "lang", "style", "tabindex", "title", "translate",
  #                                                           "autofocus", "disabled", "form", "formaction", "formenctype",
  #                                                           "formmethod", "formvalidate", "formtarget", "name", "type", "value"]
  #=============================================================================#
  SUPPORTED_HTML_ATTRIBUTES = {
    "a" => (COMMON_HTML_ATTRIBUTES + ["charset","coords", "download", "href", "hreflang", "name", "media", "ping", "rel", "rel_list", "rev", "shape", "target", "type"]).sort!,
    "area" => (COMMON_HTML_ATTRIBUTES + ["alt", "coords", "download", "hreflang", "no_href?", "ping", "rel", "rel_list", "shape", "target", "type"]).sort!,
    "base" => (COMMON_HTML_ATTRIBUTES + ["href", "target"]).sort!,
    "body" => (COMMON_HTML_ATTRIBUTES + ["a_link", "background", "bg_color", "link", "onafterprint", "onbeforeprint", "onbeforeunload", "onhashchange", "onlanguagechange", "onmessage", "onoffline", "ononline","onpagehide", "onpageshow", "onpopstate", "onstorage", "onunload", "v_link"]).sort!,
    "br" => (COMMON_HTML_ATTRIBUTES + ["clear"]).sort!,
    "button" => (COMMON_HTML_ATTRIBUTES + ["autofocus?", "disabled?", "form", "form_action", "form_enctype", "form_method", "form_no_validate?", "form_target", "labels", "menu", "name", "type", "validation_message", "validity", "will_validate?"]).sort!,
    "caption" => (COMMON_HTML_ATTRIBUTES + ["align"]).sort!,
    "data" => (COMMON_HTML_ATTRIBUTES).sort!,
    "div" => (COMMON_HTML_ATTRIBUTES + ["align"]).sort!,
    "dl" => (COMMON_HTML_ATTRIBUTES + ["compact?"]).sort!,
    "dialog" => (COMMON_HTML_ATTRIBUTES + ["open?", "return_value"]).sort!,
    "embed" => (COMMON_HTML_ATTRIBUTES + ["align", "height", "name", "src", "type", "width"]).sort!,
    "fieldset" => (COMMON_HTML_ATTRIBUTES + ["disabled/","form", "name", "type", "validation_Message", "validity", "will_validate?"]).sort!,
    "font" => (COMMON_HTML_ATTRIBUTES + ["color", "face", "size"]).sort!,
    "form" => (COMMON_HTML_ATTRIBUTES + ["accept_charset", "action", "autocomplete", "encoding", "enctype", "length", "method", "name", "no_validate?", "target"]).sort!,
    "header"=> (COMMON_HTML_ATTRIBUTES).sort!,
    "hr" => (COMMON_HTML_ATTRIBUTES + ["align", "color", "no_shade?", "size", "width"]).sort!,
    "head"=> (COMMON_HTML_ATTRIBUTES + ["align"]).sort!,
    "html" => (COMMON_HTML_ATTRIBUTES + ["version"]).sort!,
    "iframe" => (COMMON_HTML_ATTRIBUTES + ["align", "allow_fullscreen?", "content_document", "content_window", "frame_border", "height", "long_desc", "margin_height", "margin_width", "name", "sandbox", "scrollong", "seamless?", "src", "srcdoc", "width"]).sort!,
    "img" => (COMMON_HTML_ATTRIBUTES + ["align", "alt", "border", "complete?", "cross_origin", "current_src", "height", "hspace", "loaded?", "long_desc", "lowsrc", "map?", "name", "natural_height", "natural_width", "sizes", "src", "srcset", "use_map", "vspace", "width"]).sort!,
    "input" => (COMMON_HTML_ATTRIBUTES + ["accept", "align", "alt", "autocomplete", "autofocus?", "checked?", "default_checked?", "default_value", "dir_name", "disabled?", "files", "form_action", "form_enctype", "form_method", "form_no_validate?", "form_target", "ndeterminate?",  "input_mode", "labels", "list", "max", "max_length", "min", "min_length", "multiple?", "pattern", "placeholder", "read_only?", "required?", "selection_direction", "selection_end", "selection_start", "size", "src", "step", "use_map", "value_as_date", "value_as_number", "value_high", "value_low"]).sort!,
    "keygen" => (COMMON_HTML_ATTRIBUTES + ["autofocus?", "challange", "disabled?", "form", "keytype", "labels", "name", "type", "validation_message", "validity", "will_validate?"]).sort!,
    "legend" => (COMMON_HTML_ATTRIBUTES + ["align", "form"]).sort!,
    "li" => (COMMON_HTML_ATTRIBUTES + ["type"]).sort!,
    "label" => (COMMON_HTML_ATTRIBUTES + ["control", "for", "form"]).sort!,
    "map" => (COMMON_HTML_ATTRIBUTES + ["areas", "images", "name"]).sort!,
    "menu" => (COMMON_HTML_ATTRIBUTES + ["compact?", "label", "type"]).sort!,
    "menuitem" => (COMMON_HTML_ATTRIBUTES + ["checked?", "command", "default?", "disabled?", "icon", "label", "radiogroup", "type"]).sort!,
    "meta" => (COMMON_HTML_ATTRIBUTES + ["content", "http-equiv", "name", "scheme"]).sort!,
    "meter" => (COMMON_HTML_ATTRIBUTES + ["high", "labels", "low", "max", "min", "optium"]).sort!,
    "ol" => (COMMON_HTML_ATTRIBUTES + ["compact?", "reversed?", "start", "type"]).sort!,
    "object" => (COMMON_HTML_ATTRIBUTES + ["align", "archive", "border", "code", "code_base", "code_type", "content_document", "content_window", "data", "declare?", "form", "height", "hspace", "name", "standby", "type", "type_must_match?", "use_map", "validation_message", "validity", "vspace",  "width", "will_validate?"]).sort!,
    "option" => (COMMON_HTML_ATTRIBUTES + ["clear", "default_selected?", "disabled?", "form", "index", "label", "selected?"]).sort!,
    "optgroup" => (COMMON_HTML_ATTRIBUTES + ["disabled?", "label"]).sort!,
    "p" => (COMMON_HTML_ATTRIBUTES + ["align"]).sort!,
    "param" => (COMMON_HTML_ATTRIBUTES + ["name", "type", "value_type"]).sort!,
    "pre" => (COMMON_HTML_ATTRIBUTES + ["width"]).sort!,
    "script" => (COMMON_HTML_ATTRIBUTES + ["async?", "charset", "cross_origin", "defer?", "event", "for", "src", "type"]).sort!,
    "select" => (COMMON_HTML_ATTRIBUTES + ["autocomplete", "autofocus?", "clear", "disapbled?", "form", "labels", "length", "multiple?", "name", "options", "required?", "selected_index", "selected_options", "size", "type", "validation_message", "validity", "will_validate?"]).sort!,
    "source" => (COMMON_HTML_ATTRIBUTES + ["media", "sizes", "src", "srcset", "type"]).sort!,
    "span" => (COMMON_HTML_ATTRIBUTES).sort!,
    "style" => (COMMON_HTML_ATTRIBUTES + ["media", "scoped?", "type"]).sort!,
    "table" => (COMMON_HTML_ATTRIBUTES + ["align", "bg_color", "border", "caption", "cell_padding", "cell_spacing", "frame", "rules", "sortable?", "summary", "t_bodies", "t_foot", "t_head", "width"]).sort!,
    "th" => (COMMON_HTML_ATTRIBUTES + ["abbr", "align", "axis", "bg_color", "cell_index", "ch", "ch_off", "col_span", "headers", "height", "no_wrap?", "row_span", "scope", "sorted", "v_align", "width"]).sort!,
    "td" => (COMMON_HTML_ATTRIBUTES + ["align", "axis", "bg_color", "cell_index", "ch", "ch_off", "col_span", "headers", "height", "no_wrap?", "row_span", "v_align", "width"]).sort!,
    "textarea" => (COMMON_HTML_ATTRIBUTES + ["autocomplete", "autofocus?", "cols", "default_value", "dir_name", "disabled?", "form", "input_mode", "labels", "max_length", "min_length", "name", "placeholder", "read_only?", "required?", "selection_direction", "selection_end", "selection_start", "text_lenght", "type", "validation_message", "validity", "will_validate?", "wrap"]).sort!,
    "thead" => (COMMON_HTML_ATTRIBUTES + ["align", "axis", "bg_color", "cell_index", "ch", "ch_off", "col_span", "headers", "height", "no_wrap?", "row_span", "v_align", "width"]).sort!,
    "tfoot" => (COMMON_HTML_ATTRIBUTES).sort!,
    "template" => (COMMON_HTML_ATTRIBUTES + ["content"]).sort!,
    "time" => (COMMON_HTML_ATTRIBUTES + ["date_time"]).sort!,
    "title" => (COMMON_HTML_ATTRIBUTES).sort!,
    "tr" => (COMMON_HTML_ATTRIBUTES + ["align", "bg_color", "ch", "ch_off", "row_index", "section_row_index", "v_align"]).sort!,
    "track" => (COMMON_HTML_ATTRIBUTES + ["default?", "kind", "label", "ready_state", "src" "srclang", "track"]).sort!,
    "ul" => (COMMON_HTML_ATTRIBUTES + ["compact?", "type"]).sort!
  }

  #=============================================================================#
  # ObjectName: SUPPORTED_HTML_ELEMENTS
  # Returns: ARRAY
  #
  # Description: Contains a list of HTML elements that Watir-Webdriver supports
  #
  # HTML Element = Watir Class
  # ---------------------------
  # a = Watir::Anchor
  # area = Watir::Area
  # br = Watir::BR
  # body = Watir::Body
  # button = Watir::Button
  # div = Watir::Div
  # form = Watir::Form
  # hr = Watir::HR
  # head = Watir::Head
  # img = Watir::Image
  # input = Watir::Input
  # label = Watir::Label
  # li = Watir::LI
  # map = Watir::Map
  # option = Watir::Option
  # p = Watir::Paragraph
  # pre = Watir::Pre
  # script = Watir::Script
  # select = Watir::Select
  # span = Watir::Span
  # style = Watir::Style
  # table = Watir::Table
  # td = Watir::TableDataCell
  # textarea = Watir::TextArea
  # th = Watir::TableHeaderCell
  # thead = Watir::TableSection  # a.k.a. t_head
  # tr = Watir::TableRow
  # ul = Watir::UList
  #
  # Usage examples:
  #                      # Define the elements to check
  #                      aSupportedHTMLElementNames = SUPPORTED_HTML_ELEMENTS
  #
  #=============================================================================#
  SUPPORTED_HTML_ELEMENTS = [
    "a", "area",
    "br", "base", "body", "button",
    "caption",
    "data", "dialog", "div", "dl",
    "embed",
    "fieldset","font", "form",
    "hr", "head", "header", "html",
    "iframe", "img", "input",
    "keygen",
    "label", "legend", "li",
    "map", "menu", "menuitem", "meta", "meter",
    "object", "ol", "optgroup", "option", "output",
    "p", "param", "pre",
    "script", "select", "source", "span", "style",
    "table", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track",
    "ul"
  ]

  #=============================================================================#
  # ObjectName: TOP_LEVEL_DOMAINS
  # Returns: ARRAY
  #
  # Description: Contains a list of Top Level Domain names from:
  #                 http://www.icann.org/
  #              Version 2017022701, Last Updated Tue Feb 28 07:07:01 2017 UTC
  #
  # Usage examples:
  #                 sMy_TLD = "BIZ"
  #                 TOP_LEVEL_DOMAINS.each do |  sTLD |
  #                    if(sMy_TLD == sTLD)
  #                       puts2("#{sMy_TLD} is a valid Top-Level-Domain")
  #                    end
  #                 end
  #=============================================================================#
  TOP_LEVEL_DOMAINS = [
    "AAA",
    "AARP",
    "ABARTH",
    "ABB",
    "ABBOTT",
    "ABBVIE",
    "ABC",
    "ABLE",
    "ABOGADO",
    "ABUDHABI",
    "AC",
    "ACADEMY",
    "ACCENTURE",
    "ACCOUNTANT",
    "ACCOUNTANTS",
    "ACO",
    "ACTIVE",
    "ACTOR",
    "AD",
    "ADAC",
    "ADS",
    "ADULT",
    "AE",
    "AEG",
    "AERO",
    "AETNA",
    "AF",
    "AFAMILYCOMPANY",
    "AFL",
    "AFRICA",
    "AG",
    "AGAKHAN",
    "AGENCY",
    "AI",
    "AIG",
    "AIGO",
    "AIRBUS",
    "AIRFORCE",
    "AIRTEL",
    "AKDN",
    "AL",
    "ALFAROMEO",
    "ALIBABA",
    "ALIPAY",
    "ALLFINANZ",
    "ALLSTATE",
    "ALLY",
    "ALSACE",
    "ALSTOM",
    "AM",
    "AMERICANEXPRESS",
    "AMERICANFAMILY",
    "AMEX",
    "AMFAM",
    "AMICA",
    "AMSTERDAM",
    "ANALYTICS",
    "ANDROID",
    "ANQUAN",
    "ANZ",
    "AO",
    "AOL",
    "APARTMENTS",
    "APP",
    "APPLE",
    "AQ",
    "AQUARELLE",
    "AR",
    "ARAMCO",
    "ARCHI",
    "ARMY",
    "ARPA",
    "ART",
    "ARTE",
    "AS",
    "ASDA",
    "ASIA",
    "ASSOCIATES",
    "AT",
    "ATHLETA",
    "ATTORNEY",
    "AU",
    "AUCTION",
    "AUDI",
    "AUDIBLE",
    "AUDIO",
    "AUSPOST",
    "AUTHOR",
    "AUTO",
    "AUTOS",
    "AVIANCA",
    "AW",
    "AWS",
    "AX",
    "AXA",
    "AZ",
    "AZURE",
    "BA",
    "BABY",
    "BAIDU",
    "BANAMEX",
    "BANANAREPUBLIC",
    "BAND",
    "BANK",
    "BAR",
    "BARCELONA",
    "BARCLAYCARD",
    "BARCLAYS",
    "BAREFOOT",
    "BARGAINS",
    "BASEBALL",
    "BASKETBALL",
    "BAUHAUS",
    "BAYERN",
    "BB",
    "BBC",
    "BBT",
    "BBVA",
    "BCG",
    "BCN",
    "BD",
    "BE",
    "BEATS",
    "BEAUTY",
    "BEER",
    "BENTLEY",
    "BERLIN",
    "BEST",
    "BESTBUY",
    "BET",
    "BF",
    "BG",
    "BH",
    "BHARTI",
    "BI",
    "BIBLE",
    "BID",
    "BIKE",
    "BING",
    "BINGO",
    "BIO",
    "BIZ",
    "BJ",
    "BLACK",
    "BLACKFRIDAY",
    "BLANCO",
    "BLOCKBUSTER",
    "BLOG",
    "BLOOMBERG",
    "BLUE",
    "BM",
    "BMS",
    "BMW",
    "BN",
    "BNL",
    "BNPPARIBAS",
    "BO",
    "BOATS",
    "BOEHRINGER",
    "BOFA",
    "BOM",
    "BOND",
    "BOO",
    "BOOK",
    "BOOKING",
    "BOOTS",
    "BOSCH",
    "BOSTIK",
    "BOSTON",
    "BOT",
    "BOUTIQUE",
    "BOX",
    "BR",
    "BRADESCO",
    "BRIDGESTONE",
    "BROADWAY",
    "BROKER",
    "BROTHER",
    "BRUSSELS",
    "BS",
    "BT",
    "BUDAPEST",
    "BUGATTI",
    "BUILD",
    "BUILDERS",
    "BUSINESS",
    "BUY",
    "BUZZ",
    "BV",
    "BW",
    "BY",
    "BZ",
    "BZH",
    "CA",
    "CAB",
    "CAFE",
    "CAL",
    "CALL",
    "CALVINKLEIN",
    "CAM",
    "CAMERA",
    "CAMP",
    "CANCERRESEARCH",
    "CANON",
    "CAPETOWN",
    "CAPITAL",
    "CAPITALONE",
    "CAR",
    "CARAVAN",
    "CARDS",
    "CARE",
    "CAREER",
    "CAREERS",
    "CARS",
    "CARTIER",
    "CASA",
    "CASE",
    "CASEIH",
    "CASH",
    "CASINO",
    "CAT",
    "CATERING",
    "CATHOLIC",
    "CBA",
    "CBN",
    "CBRE",
    "CBS",
    "CC",
    "CD",
    "CEB",
    "CENTER",
    "CEO",
    "CERN",
    "CF",
    "CFA",
    "CFD",
    "CG",
    "CH",
    "CHANEL",
    "CHANNEL",
    "CHASE",
    "CHAT",
    "CHEAP",
    "CHINTAI",
    "CHLOE",
    "CHRISTMAS",
    "CHROME",
    "CHRYSLER",
    "CHURCH",
    "CI",
    "CIPRIANI",
    "CIRCLE",
    "CISCO",
    "CITADEL",
    "CITI",
    "CITIC",
    "CITY",
    "CITYEATS",
    "CK",
    "CL",
    "CLAIMS",
    "CLEANING",
    "CLICK",
    "CLINIC",
    "CLINIQUE",
    "CLOTHING",
    "CLOUD",
    "CLUB",
    "CLUBMED",
    "CM",
    "CN",
    "CO",
    "COACH",
    "CODES",
    "COFFEE",
    "COLLEGE",
    "COLOGNE",
    "COM",
    "COMCAST",
    "COMMBANK",
    "COMMUNITY",
    "COMPANY",
    "COMPARE",
    "COMPUTER",
    "COMSEC",
    "CONDOS",
    "CONSTRUCTION",
    "CONSULTING",
    "CONTACT",
    "CONTRACTORS",
    "COOKING",
    "COOKINGCHANNEL",
    "COOL",
    "COOP",
    "CORSICA",
    "COUNTRY",
    "COUPON",
    "COUPONS",
    "COURSES",
    "CR",
    "CREDIT",
    "CREDITCARD",
    "CREDITUNION",
    "CRICKET",
    "CROWN",
    "CRS",
    "CRUISE",
    "CRUISES",
    "CSC",
    "CU",
    "CUISINELLA",
    "CV",
    "CW",
    "CX",
    "CY",
    "CYMRU",
    "CYOU",
    "CZ",
    "DABUR",
    "DAD",
    "DANCE",
    "DATA",
    "DATE",
    "DATING",
    "DATSUN",
    "DAY",
    "DCLK",
    "DDS",
    "DE",
    "DEAL",
    "DEALER",
    "DEALS",
    "DEGREE",
    "DELIVERY",
    "DELL",
    "DELOITTE",
    "DELTA",
    "DEMOCRAT",
    "DENTAL",
    "DENTIST",
    "DESI",
    "DESIGN",
    "DEV",
    "DHL",
    "DIAMONDS",
    "DIET",
    "DIGITAL",
    "DIRECT",
    "DIRECTORY",
    "DISCOUNT",
    "DISCOVER",
    "DISH",
    "DIY",
    "DJ",
    "DK",
    "DM",
    "DNP",
    "DO",
    "DOCS",
    "DOCTOR",
    "DODGE",
    "DOG",
    "DOHA",
    "DOMAINS",
    "DOT",
    "DOWNLOAD",
    "DRIVE",
    "DTV",
    "DUBAI",
    "DUCK",
    "DUNLOP",
    "DUNS",
    "DUPONT",
    "DURBAN",
    "DVAG",
    "DVR",
    "DZ",
    "EARTH",
    "EAT",
    "EC",
    "ECO",
    "EDEKA",
    "EDU",
    "EDUCATION",
    "EE",
    "EG",
    "EMAIL",
    "EMERCK",
    "ENERGY",
    "ENGINEER",
    "ENGINEERING",
    "ENTERPRISES",
    "EPOST",
    "EPSON",
    "EQUIPMENT",
    "ER",
    "ERICSSON",
    "ERNI",
    "ES",
    "ESQ",
    "ESTATE",
    "ESURANCE",
    "ET",
    "EU",
    "EUROVISION",
    "EUS",
    "EVENTS",
    "EVERBANK",
    "EXCHANGE",
    "EXPERT",
    "EXPOSED",
    "EXPRESS",
    "EXTRASPACE",
    "FAGE",
    "FAIL",
    "FAIRWINDS",
    "FAITH",
    "FAMILY",
    "FAN",
    "FANS",
    "FARM",
    "FARMERS",
    "FASHION",
    "FAST",
    "FEDEX",
    "FEEDBACK",
    "FERRARI",
    "FERRERO",
    "FI",
    "FIAT",
    "FIDELITY",
    "FIDO",
    "FILM",
    "FINAL",
    "FINANCE",
    "FINANCIAL",
    "FIRE",
    "FIRESTONE",
    "FIRMDALE",
    "FISH",
    "FISHING",
    "FIT",
    "FITNESS",
    "FJ",
    "FK",
    "FLICKR",
    "FLIGHTS",
    "FLIR",
    "FLORIST",
    "FLOWERS",
    "FLY",
    "FM",
    "FO",
    "FOO",
    "FOOD",
    "FOODNETWORK",
    "FOOTBALL",
    "FORD",
    "FOREX",
    "FORSALE",
    "FORUM",
    "FOUNDATION",
    "FOX",
    "FR",
    "FREE",
    "FRESENIUS",
    "FRL",
    "FROGANS",
    "FRONTDOOR",
    "FRONTIER",
    "FTR",
    "FUJITSU",
    "FUJIXEROX",
    "FUN",
    "FUND",
    "FURNITURE",
    "FUTBOL",
    "FYI",
    "GA",
    "GAL",
    "GALLERY",
    "GALLO",
    "GALLUP",
    "GAME",
    "GAMES",
    "GAP",
    "GARDEN",
    "GB",
    "GBIZ",
    "GD",
    "GDN",
    "GE",
    "GEA",
    "GENT",
    "GENTING",
    "GEORGE",
    "GF",
    "GG",
    "GGEE",
    "GH",
    "GI",
    "GIFT",
    "GIFTS",
    "GIVES",
    "GIVING",
    "GL",
    "GLADE",
    "GLASS",
    "GLE",
    "GLOBAL",
    "GLOBO",
    "GM",
    "GMAIL",
    "GMBH",
    "GMO",
    "GMX",
    "GN",
    "GODADDY",
    "GOLD",
    "GOLDPOINT",
    "GOLF",
    "GOO",
    "GOODHANDS",
    "GOODYEAR",
    "GOOG",
    "GOOGLE",
    "GOP",
    "GOT",
    "GOV",
    "GP",
    "GQ",
    "GR",
    "GRAINGER",
    "GRAPHICS",
    "GRATIS",
    "GREEN",
    "GRIPE",
    "GROUP",
    "GS",
    "GT",
    "GU",
    "GUARDIAN",
    "GUCCI",
    "GUGE",
    "GUIDE",
    "GUITARS",
    "GURU",
    "GW",
    "GY",
    "HAIR",
    "HAMBURG",
    "HANGOUT",
    "HAUS",
    "HBO",
    "HDFC",
    "HDFCBANK",
    "HEALTH",
    "HEALTHCARE",
    "HELP",
    "HELSINKI",
    "HERE",
    "HERMES",
    "HGTV",
    "HIPHOP",
    "HISAMITSU",
    "HITACHI",
    "HIV",
    "HK",
    "HKT",
    "HM",
    "HN",
    "HOCKEY",
    "HOLDINGS",
    "HOLIDAY",
    "HOMEDEPOT",
    "HOMEGOODS",
    "HOMES",
    "HOMESENSE",
    "HONDA",
    "HONEYWELL",
    "HORSE",
    "HOSPITAL",
    "HOST",
    "HOSTING",
    "HOT",
    "HOTELES",
    "HOTMAIL",
    "HOUSE",
    "HOW",
    "HR",
    "HSBC",
    "HT",
    "HTC",
    "HU",
    "HUGHES",
    "HYATT",
    "HYUNDAI",
    "IBM",
    "ICBC",
    "ICE",
    "ICU",
    "ID",
    "IE",
    "IEEE",
    "IFM",
    "IKANO",
    "IL",
    "IM",
    "IMAMAT",
    "IMDB",
    "IMMO",
    "IMMOBILIEN",
    "IN",
    "INDUSTRIES",
    "INFINITI",
    "INFO",
    "ING",
    "INK",
    "INSTITUTE",
    "INSURANCE",
    "INSURE",
    "INT",
    "INTEL",
    "INTERNATIONAL",
    "INTUIT",
    "INVESTMENTS",
    "IO",
    "IPIRANGA",
    "IQ",
    "IR",
    "IRISH",
    "IS",
    "ISELECT",
    "ISMAILI",
    "IST",
    "ISTANBUL",
    "IT",
    "ITAU",
    "ITV",
    "IVECO",
    "IWC",
    "JAGUAR",
    "JAVA",
    "JCB",
    "JCP",
    "JE",
    "JEEP",
    "JETZT",
    "JEWELRY",
    "JIO",
    "JLC",
    "JLL",
    "JM",
    "JMP",
    "JNJ",
    "JO",
    "JOBS",
    "JOBURG",
    "JOT",
    "JOY",
    "JP",
    "JPMORGAN",
    "JPRS",
    "JUEGOS",
    "JUNIPER",
    "KAUFEN",
    "KDDI",
    "KE",
    "KERRYHOTELS",
    "KERRYLOGISTICS",
    "KERRYPROPERTIES",
    "KFH",
    "KG",
    "KH",
    "KI",
    "KIA",
    "KIM",
    "KINDER",
    "KINDLE",
    "KITCHEN",
    "KIWI",
    "KM",
    "KN",
    "KOELN",
    "KOMATSU",
    "KOSHER",
    "KP",
    "KPMG",
    "KPN",
    "KR",
    "KRD",
    "KRED",
    "KUOKGROUP",
    "KW",
    "KY",
    "KYOTO",
    "KZ",
    "LA",
    "LACAIXA",
    "LADBROKES",
    "LAMBORGHINI",
    "LAMER",
    "LANCASTER",
    "LANCIA",
    "LANCOME",
    "LAND",
    "LANDROVER",
    "LANXESS",
    "LASALLE",
    "LAT",
    "LATINO",
    "LATROBE",
    "LAW",
    "LAWYER",
    "LB",
    "LC",
    "LDS",
    "LEASE",
    "LECLERC",
    "LEFRAK",
    "LEGAL",
    "LEGO",
    "LEXUS",
    "LGBT",
    "LI",
    "LIAISON",
    "LIDL",
    "LIFE",
    "LIFEINSURANCE",
    "LIFESTYLE",
    "LIGHTING",
    "LIKE",
    "LILLY",
    "LIMITED",
    "LIMO",
    "LINCOLN",
    "LINDE",
    "LINK",
    "LIPSY",
    "LIVE",
    "LIVING",
    "LIXIL",
    "LK",
    "LOAN",
    "LOANS",
    "LOCKER",
    "LOCUS",
    "LOFT",
    "LOL",
    "LONDON",
    "LOTTE",
    "LOTTO",
    "LOVE",
    "LPL",
    "LPLFINANCIAL",
    "LR",
    "LS",
    "LT",
    "LTD",
    "LTDA",
    "LU",
    "LUNDBECK",
    "LUPIN",
    "LUXE",
    "LUXURY",
    "LV",
    "LY",
    "MA",
    "MACYS",
    "MADRID",
    "MAIF",
    "MAISON",
    "MAKEUP",
    "MAN",
    "MANAGEMENT",
    "MANGO",
    "MARKET",
    "MARKETING",
    "MARKETS",
    "MARRIOTT",
    "MARSHALLS",
    "MASERATI",
    "MATTEL",
    "MBA",
    "MC",
    "MCD",
    "MCDONALDS",
    "MCKINSEY",
    "MD",
    "ME",
    "MED",
    "MEDIA",
    "MEET",
    "MELBOURNE",
    "MEME",
    "MEMORIAL",
    "MEN",
    "MENU",
    "MEO",
    "METLIFE",
    "MG",
    "MH",
    "MIAMI",
    "MICROSOFT",
    "MIL",
    "MINI",
    "MINT",
    "MIT",
    "MITSUBISHI",
    "MK",
    "ML",
    "MLB",
    "MLS",
    "MM",
    "MMA",
    "MN",
    "MO",
    "MOBI",
    "MOBILE",
    "MOBILY",
    "MODA",
    "MOE",
    "MOI",
    "MOM",
    "MONASH",
    "MONEY",
    "MONSTER",
    "MONTBLANC",
    "MOPAR",
    "MORMON",
    "MORTGAGE",
    "MOSCOW",
    "MOTO",
    "MOTORCYCLES",
    "MOV",
    "MOVIE",
    "MOVISTAR",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MSD",
    "MT",
    "MTN",
    "MTPC",
    "MTR",
    "MU",
    "MUSEUM",
    "MUTUAL",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NAB",
    "NADEX",
    "NAGOYA",
    "NAME",
    "NATIONWIDE",
    "NATURA",
    "NAVY",
    "NBA",
    "NC",
    "NE",
    "NEC",
    "NET",
    "NETBANK",
    "NETFLIX",
    "NETWORK",
    "NEUSTAR",
    "NEW",
    "NEWHOLLAND",
    "NEWS",
    "NEXT",
    "NEXTDIRECT",
    "NEXUS",
    "NF",
    "NFL",
    "NG",
    "NGO",
    "NHK",
    "NI",
    "NICO",
    "NIKE",
    "NIKON",
    "NINJA",
    "NISSAN",
    "NISSAY",
    "NL",
    "NO",
    "NOKIA",
    "NORTHWESTERNMUTUAL",
    "NORTON",
    "NOW",
    "NOWRUZ",
    "NOWTV",
    "NP",
    "NR",
    "NRA",
    "NRW",
    "NTT",
    "NU",
    "NYC",
    "NZ",
    "OBI",
    "OBSERVER",
    "OFF",
    "OFFICE",
    "OKINAWA",
    "OLAYAN",
    "OLAYANGROUP",
    "OLDNAVY",
    "OLLO",
    "OM",
    "OMEGA",
    "ONE",
    "ONG",
    "ONL",
    "ONLINE",
    "ONYOURSIDE",
    "OOO",
    "OPEN",
    "ORACLE",
    "ORANGE",
    "ORG",
    "ORGANIC",
    "ORIENTEXPRESS",
    "ORIGINS",
    "OSAKA",
    "OTSUKA",
    "OTT",
    "OVH",
    "PA",
    "PAGE",
    "PAMPEREDCHEF",
    "PANASONIC",
    "PANERAI",
    "PARIS",
    "PARS",
    "PARTNERS",
    "PARTS",
    "PARTY",
    "PASSAGENS",
    "PAY",
    "PCCW",
    "PE",
    "PET",
    "PF",
    "PFIZER",
    "PG",
    "PH",
    "PHARMACY",
    "PHILIPS",
    "PHONE",
    "PHOTO",
    "PHOTOGRAPHY",
    "PHOTOS",
    "PHYSIO",
    "PIAGET",
    "PICS",
    "PICTET",
    "PICTURES",
    "PID",
    "PIN",
    "PING",
    "PINK",
    "PIONEER",
    "PIZZA",
    "PK",
    "PL",
    "PLACE",
    "PLAY",
    "PLAYSTATION",
    "PLUMBING",
    "PLUS",
    "PM",
    "PN",
    "PNC",
    "POHL",
    "POKER",
    "POLITIE",
    "PORN",
    "POST",
    "PR",
    "PRAMERICA",
    "PRAXI",
    "PRESS",
    "PRIME",
    "PRO",
    "PROD",
    "PRODUCTIONS",
    "PROF",
    "PROGRESSIVE",
    "PROMO",
    "PROPERTIES",
    "PROPERTY",
    "PROTECTION",
    "PRU",
    "PRUDENTIAL",
    "PS",
    "PT",
    "PUB",
    "PW",
    "PWC",
    "PY",
    "QA",
    "QPON",
    "QUEBEC",
    "QUEST",
    "QVC",
    "RACING",
    "RADIO",
    "RAID",
    "RE",
    "READ",
    "REALESTATE",
    "REALTOR",
    "REALTY",
    "RECIPES",
    "RED",
    "REDSTONE",
    "REDUMBRELLA",
    "REHAB",
    "REISE",
    "REISEN",
    "REIT",
    "RELIANCE",
    "REN",
    "RENT",
    "RENTALS",
    "REPAIR",
    "REPORT",
    "REPUBLICAN",
    "REST",
    "RESTAURANT",
    "REVIEW",
    "REVIEWS",
    "REXROTH",
    "RICH",
    "RICHARDLI",
    "RICOH",
    "RIGHTATHOME",
    "RIL",
    "RIO",
    "RIP",
    "RMIT",
    "RO",
    "ROCHER",
    "ROCKS",
    "RODEO",
    "ROGERS",
    "ROOM",
    "RS",
    "RSVP",
    "RU",
    "RUHR",
    "RUN",
    "RW",
    "RWE",
    "RYUKYU",
    "SA",
    "SAARLAND",
    "SAFE",
    "SAFETY",
    "SAKURA",
    "SALE",
    "SALON",
    "SAMSCLUB",
    "SAMSUNG",
    "SANDVIK",
    "SANDVIKCOROMANT",
    "SANOFI",
    "SAP",
    "SAPO",
    "SARL",
    "SAS",
    "SAVE",
    "SAXO",
    "SB",
    "SBI",
    "SBS",
    "SC",
    "SCA",
    "SCB",
    "SCHAEFFLER",
    "SCHMIDT",
    "SCHOLARSHIPS",
    "SCHOOL",
    "SCHULE",
    "SCHWARZ",
    "SCIENCE",
    "SCJOHNSON",
    "SCOR",
    "SCOT",
    "SD",
    "SE",
    "SEAT",
    "SECURE",
    "SECURITY",
    "SEEK",
    "SELECT",
    "SENER",
    "SERVICES",
    "SES",
    "SEVEN",
    "SEW",
    "SEX",
    "SEXY",
    "SFR",
    "SG",
    "SH",
    "SHANGRILA",
    "SHARP",
    "SHAW",
    "SHELL",
    "SHIA",
    "SHIKSHA",
    "SHOES",
    "SHOP",
    "SHOPPING",
    "SHOUJI",
    "SHOW",
    "SHOWTIME",
    "SHRIRAM",
    "SI",
    "SILK",
    "SINA",
    "SINGLES",
    "SITE",
    "SJ",
    "SK",
    "SKI",
    "SKIN",
    "SKY",
    "SKYPE",
    "SL",
    "SLING",
    "SM",
    "SMART",
    "SMILE",
    "SN",
    "SNCF",
    "SO",
    "SOCCER",
    "SOCIAL",
    "SOFTBANK",
    "SOFTWARE",
    "SOHU",
    "SOLAR",
    "SOLUTIONS",
    "SONG",
    "SONY",
    "SOY",
    "SPACE",
    "SPIEGEL",
    "SPOT",
    "SPREADBETTING",
    "SR",
    "SRL",
    "SRT",
    "ST",
    "STADA",
    "STAPLES",
    "STAR",
    "STARHUB",
    "STATEBANK",
    "STATEFARM",
    "STATOIL",
    "STC",
    "STCGROUP",
    "STOCKHOLM",
    "STORAGE",
    "STORE",
    "STREAM",
    "STUDIO",
    "STUDY",
    "STYLE",
    "SU",
    "SUCKS",
    "SUPPLIES",
    "SUPPLY",
    "SUPPORT",
    "SURF",
    "SURGERY",
    "SUZUKI",
    "SV",
    "SWATCH",
    "SWIFTCOVER",
    "SWISS",
    "SX",
    "SY",
    "SYDNEY",
    "SYMANTEC",
    "SYSTEMS",
    "SZ",
    "TAB",
    "TAIPEI",
    "TALK",
    "TAOBAO",
    "TARGET",
    "TATAMOTORS",
    "TATAR",
    "TATTOO",
    "TAX",
    "TAXI",
    "TC",
    "TCI",
    "TD",
    "TDK",
    "TEAM",
    "TECH",
    "TECHNOLOGY",
    "TEL",
    "TELECITY",
    "TELEFONICA",
    "TEMASEK",
    "TENNIS",
    "TEVA",
    "TF",
    "TG",
    "TH",
    "THD",
    "THEATER",
    "THEATRE",
    "TIAA",
    "TICKETS",
    "TIENDA",
    "TIFFANY",
    "TIPS",
    "TIRES",
    "TIROL",
    "TJ",
    "TJMAXX",
    "TJX",
    "TK",
    "TKMAXX",
    "TL",
    "TM",
    "TMALL",
    "TN",
    "TO",
    "TODAY",
    "TOKYO",
    "TOOLS",
    "TOP",
    "TORAY",
    "TOSHIBA",
    "TOTAL",
    "TOURS",
    "TOWN",
    "TOYOTA",
    "TOYS",
    "TR",
    "TRADE",
    "TRADING",
    "TRAINING",
    "TRAVEL",
    "TRAVELCHANNEL",
    "TRAVELERS",
    "TRAVELERSINSURANCE",
    "TRUST",
    "TRV",
    "TT",
    "TUBE",
    "TUI",
    "TUNES",
    "TUSHU",
    "TV",
    "TVS",
    "TW",
    "TZ",
    "UA",
    "UBANK",
    "UBS",
    "UCONNECT",
    "UG",
    "UK",
    "UNICOM",
    "UNIVERSITY",
    "UNO",
    "UOL",
    "UPS",
    "US",
    "UY",
    "UZ",
    "VA",
    "VACATIONS",
    "VANA",
    "VANGUARD",
    "VC",
    "VE",
    "VEGAS",
    "VENTURES",
    "VERISIGN",
    "VERSICHERUNG",
    "VET",
    "VG",
    "VI",
    "VIAJES",
    "VIDEO",
    "VIG",
    "VIKING",
    "VILLAS",
    "VIN",
    "VIP",
    "VIRGIN",
    "VISA",
    "VISION",
    "VISTA",
    "VISTAPRINT",
    "VIVA",
    "VIVO",
    "VLAANDEREN",
    "VN",
    "VODKA",
    "VOLKSWAGEN",
    "VOLVO",
    "VOTE",
    "VOTING",
    "VOTO",
    "VOYAGE",
    "VU",
    "VUELOS",
    "WALES",
    "WALMART",
    "WALTER",
    "WANG",
    "WANGGOU",
    "WARMAN",
    "WATCH",
    "WATCHES",
    "WEATHER",
    "WEATHERCHANNEL",
    "WEBCAM",
    "WEBER",
    "WEBSITE",
    "WED",
    "WEDDING",
    "WEIBO",
    "WEIR",
    "WF",
    "WHOSWHO",
    "WIEN",
    "WIKI",
    "WILLIAMHILL",
    "WIN",
    "WINDOWS",
    "WINE",
    "WINNERS",
    "WME",
    "WOLTERSKLUWER",
    "WOODSIDE",
    "WORK",
    "WORKS",
    "WORLD",
    "WOW",
    "WS",
    "WTC",
    "WTF",
    "XBOX",
    "XEROX",
    "XFINITY",
    "XIHUAN",
    "XIN",
    "XN--11B4C3D",
    "XN--1CK2E1B",
    "XN--1QQW23A",
    "XN--30RR7Y",
    "XN--3BST00M",
    "XN--3DS443G",
    "XN--3E0B707E",
    "XN--3OQ18VL8PN36A",
    "XN--3PXU8K",
    "XN--42C2D9A",
    "XN--45BRJ9C",
    "XN--45Q11C",
    "XN--4GBRIM",
    "XN--54B7FTA0CC",
    "XN--55QW42G",
    "XN--55QX5D",
    "XN--5SU34J936BGSG",
    "XN--5TZM5G",
    "XN--6FRZ82G",
    "XN--6QQ986B3XL",
    "XN--80ADXHKS",
    "XN--80AO21A",
    "XN--80AQECDR1A",
    "XN--80ASEHDB",
    "XN--80ASWG",
    "XN--8Y0A063A",
    "XN--90A3AC",
    "XN--90AE",
    "XN--90AIS",
    "XN--9DBQ2A",
    "XN--9ET52U",
    "XN--9KRT00A",
    "XN--B4W605FERD",
    "XN--BCK1B9A5DRE4C",
    "XN--C1AVG",
    "XN--C2BR7G",
    "XN--CCK2B3B",
    "XN--CG4BKI",
    "XN--CLCHC0EA0B2G2A9GCD",
    "XN--CZR694B",
    "XN--CZRS0T",
    "XN--CZRU2D",
    "XN--D1ACJ3B",
    "XN--D1ALF",
    "XN--E1A4C",
    "XN--ECKVDTC9D",
    "XN--EFVY88H",
    "XN--ESTV75G",
    "XN--FCT429K",
    "XN--FHBEI",
    "XN--FIQ228C5HS",
    "XN--FIQ64B",
    "XN--FIQS8S",
    "XN--FIQZ9S",
    "XN--FJQ720A",
    "XN--FLW351E",
    "XN--FPCRJ9C3D",
    "XN--FZC2C9E2C",
    "XN--FZYS8D69UVGM",
    "XN--G2XX48C",
    "XN--GCKR3F0F",
    "XN--GECRJ9C",
    "XN--GK3AT1E",
    "XN--H2BRJ9C",
    "XN--HXT814E",
    "XN--I1B6B1A6A2E",
    "XN--IMR513N",
    "XN--IO0A7I",
    "XN--J1AEF",
    "XN--J1AMH",
    "XN--J6W193G",
    "XN--JLQ61U9W7B",
    "XN--JVR189M",
    "XN--KCRX77D1X4A",
    "XN--KPRW13D",
    "XN--KPRY57D",
    "XN--KPU716F",
    "XN--KPUT3I",
    "XN--L1ACC",
    "XN--LGBBAT1AD8J",
    "XN--MGB9AWBF",
    "XN--MGBA3A3EJT",
    "XN--MGBA3A4F16A",
    "XN--MGBA7C0BBN0A",
    "XN--MGBAAM7A8H",
    "XN--MGBAB2BD",
    "XN--MGBAI9AZGQP6J",
    "XN--MGBAYH7GPA",
    "XN--MGBB9FBPOB",
    "XN--MGBBH1A71E",
    "XN--MGBC0A9AZCG",
    "XN--MGBCA7DZDO",
    "XN--MGBERP4A5D4AR",
    "XN--MGBI4ECEXP",
    "XN--MGBPL2FH",
    "XN--MGBT3DHD",
    "XN--MGBTX2B",
    "XN--MGBX4CD0AB",
    "XN--MIX891F",
    "XN--MK1BU44C",
    "XN--MXTQ1M",
    "XN--NGBC5AZD",
    "XN--NGBE9E0A",
    "XN--NODE",
    "XN--NQV7F",
    "XN--NQV7FS00EMA",
    "XN--NYQY26A",
    "XN--O3CW4H",
    "XN--OGBPF8FL",
    "XN--P1ACF",
    "XN--P1AI",
    "XN--PBT977C",
    "XN--PGBS0DH",
    "XN--PSSY2U",
    "XN--Q9JYB4C",
    "XN--QCKA1PMC",
    "XN--QXAM",
    "XN--RHQV96G",
    "XN--ROVU88B",
    "XN--S9BRJ9C",
    "XN--SES554G",
    "XN--T60B56A",
    "XN--TCKWE",
    "XN--TIQ49XQYJ",
    "XN--UNUP4Y",
    "XN--VERMGENSBERATER-CTB",
    "XN--VERMGENSBERATUNG-PWB",
    "XN--VHQUV",
    "XN--VUQ861B",
    "XN--W4R85EL8FHU5DNRA",
    "XN--W4RS40L",
    "XN--WGBH1C",
    "XN--WGBL6A",
    "XN--XHQ521B",
    "XN--XKC2AL3HYE2A",
    "XN--XKC2DL3A5EE0H",
    "XN--Y9A3AQ",
    "XN--YFRO4I67O",
    "XN--YGBI2AMMX",
    "XN--ZFR164B",
    "XPERIA",
    "XXX",
    "XYZ",
    "YACHTS",
    "YAHOO",
    "YAMAXUN",
    "YANDEX",
    "YE",
    "YODOBASHI",
    "YOGA",
    "YOKOHAMA",
    "YOU",
    "YOUTUBE",
    "YT",
    "YUN",
    "ZA",
    "ZAPPOS",
    "ZARA",
    "ZERO",
    "ZIP",
    "ZIPPO",
    "ZM",
    "ZONE",
    "ZUERICH",
    "ZW"
  ]

end # end of module WatirWorks_RefLib

# END FILE watirworks-reflib.rb
